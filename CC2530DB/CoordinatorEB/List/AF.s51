///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            02/Jan/2023  14:29:07 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  E:\Project\ZStack\Components\stack\af\AF.c        /
//    Command line       =  -f E:\Project\ZStack\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord. /
//                          cfg (-DCPU32MHZ -DROOT=__near_func                /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f E:\Project\ZStack\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg (-DZIGBEEPRO -DSECURE=0                      /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\Project\ZStack\Componen /
//                          ts\stack\af\AF.c -D MT_TASK -D MT_SYS_FUNC -D     /
//                          MT_ZDO_FUNC -D NV_INIT -D COOR -lC                /
//                          E:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\CoordinatorEB\List\ -lA              /
//                          E:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\CoordinatorEB\List\ --diag_suppress  /
//                          Pe001,Pa010 -o E:\Project\ZStack\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\    /
//                          -e --no_code_motion --debug --core=plain          /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 24 -I                           /
//                          E:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\ -I E:\Project\ZStack\Projects\zstac /
//                          k\Samples\GenericApp\CC2530DB\..\Source\ -I       /
//                          E:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          /
//                          E:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\hal\includ /
//                          e\ -I E:\Project\ZStack\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\..\..\..\..\..\Components\hal\ /
//                          target\CC2530EB\ -I E:\Project\ZStack\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\mac\include\ -I                         /
//                          E:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\mac\high_l /
//                          evel\ -I E:\Project\ZStack\Projects\zstack\Sample /
//                          s\GenericApp\CC2530DB\..\..\..\..\..\Components\m /
//                          ac\low_level\srf04\ -I E:\Project\ZStack\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\Components\mac\low_level\srf04\single_chip\ -I  /
//                          E:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\mt\ -I     /
//                          E:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\osal\inclu /
//                          de\ -I E:\Project\ZStack\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\..\..\..\..\..\Components\ser /
//                          vices\saddr\ -I E:\Project\ZStack\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\services\sdata\ -I                          /
//                          E:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\stack\af\  /
//                          -I E:\Project\ZStack\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\Components\stack\n /
//                          wk\ -I E:\Project\ZStack\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\..\..\..\..\..\Components\sta /
//                          ck\sapi\ -I E:\Project\ZStack\Projects\zstack\Sam /
//                          ples\GenericApp\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sec\ -I E:\Project\ZStack\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\stack\sys\ -I E:\Project\ZStack\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\zdo\ -I                           /
//                          E:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\zmac\ -I   /
//                          E:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\zmac\f8w\  /
//                          -Ohz                                              /
//    List file          =  E:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\CoordinatorEB\List\AF.s51            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME AF

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,0203H
        PUBLIC ??AF_DataRequestSrcRtg?relay
        FUNCTION ??AF_DataRequestSrcRtg?relay,0203H
        PUBLIC ??afAPSF_ConfigGet?relay
        FUNCTION ??afAPSF_ConfigGet?relay,0203H
        PUBLIC ??afAPSF_ConfigSet?relay
        FUNCTION ??afAPSF_ConfigSet?relay,0203H
        FUNCTION ??afBuildMSGIncoming?relay,0203H
        PUBLIC ??afCopyAddress?relay
        FUNCTION ??afCopyAddress?relay,0203H
        PUBLIC ??afDataConfirm?relay
        FUNCTION ??afDataConfirm?relay,0203H
        PUBLIC ??afDataReqMTU?relay
        FUNCTION ??afDataReqMTU?relay,0203H
        PUBLIC ??afDelete?relay
        FUNCTION ??afDelete?relay,0203H
        PUBLIC ??afEndPoints?relay
        FUNCTION ??afEndPoints?relay,0203H
        PUBLIC ??afFindEndPointDesc?relay
        FUNCTION ??afFindEndPointDesc?relay,0203H
        FUNCTION ??afFindEndPointDescList?relay,0203H
        PUBLIC ??afFindSimpleDesc?relay
        FUNCTION ??afFindSimpleDesc?relay,0203H
        PUBLIC ??afGetMatch?relay
        FUNCTION ??afGetMatch?relay,0203H
        PUBLIC ??afIncomingData?relay
        FUNCTION ??afIncomingData?relay,0203H
        PUBLIC ??afNumEndPoints?relay
        FUNCTION ??afNumEndPoints?relay,0203H
        PUBLIC ??afRegister?relay
        FUNCTION ??afRegister?relay,0203H
        PUBLIC ??afRegisterExtended?relay
        FUNCTION ??afRegisterExtended?relay,0203H
        PUBLIC ??afSetMatch?relay
        FUNCTION ??afSetMatch?relay,0203H
        PUBLIC AF_DataRequest
        FUNCTION AF_DataRequest,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 48, STACK
        PUBLIC AF_DataRequestDiscoverRoute
        PUBLIC AF_DataRequestSrcRtg
        FUNCTION AF_DataRequestSrcRtg,021203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC afAPSF_ConfigGet
        FUNCTION afAPSF_ConfigGet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC afAPSF_ConfigSet
        FUNCTION afAPSF_ConfigSet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        FUNCTION afBuildMSGIncoming,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC afCopyAddress
        FUNCTION afCopyAddress,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDataConfirm
        FUNCTION afDataConfirm,021203H
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afDataReqMTU
        FUNCTION afDataReqMTU,021203H
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDelete
        FUNCTION afDelete,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afEndPoints
        FUNCTION afEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC afFindEndPointDesc
        FUNCTION afFindEndPointDesc,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION afFindEndPointDescList,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afFindSimpleDesc
        FUNCTION afFindSimpleDesc,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afGetMatch
        FUNCTION afGetMatch,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afIncomingData
        FUNCTION afIncomingData,021203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 41, STACK
        PUBLIC afNumEndPoints
        FUNCTION afNumEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afRegister
        FUNCTION afRegister,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afRegisterExtended
        FUNCTION afRegisterExtended,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afSetMatch
        FUNCTION afSetMatch,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC epList
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8
          CFI Resource V16:8, V17:8, V18:8, V19:8, V20:8, V21:8, V22:8, V23:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI V16 SameValue
          CFI V17 SameValue
          CFI V18 SameValue
          CFI V19 SameValue
          CFI V20 SameValue
          CFI V21 SameValue
          CFI V22 SameValue
          CFI V23 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI V16 SameValue
          CFI V17 SameValue
          CFI V18 SameValue
          CFI V19 SameValue
          CFI V20 SameValue
          CFI V21 SameValue
          CFI V22 SameValue
          CFI V23 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSDE_DataReq       SYMBOL "APSDE_DataReq"
??APSDE_DataReq?relay SYMBOL "?relay", APSDE_DataReq
APSDE_DataReqMTU    SYMBOL "APSDE_DataReqMTU"
??APSDE_DataReqMTU?relay SYMBOL "?relay", APSDE_DataReqMTU
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
NLME_IsAddressBroadcast SYMBOL "NLME_IsAddressBroadcast"
??NLME_IsAddressBroadcast?relay SYMBOL "?relay", NLME_IsAddressBroadcast
RTG_AddSrcRtgEntry_Guaranteed SYMBOL "RTG_AddSrcRtgEntry_Guaranteed"
??RTG_AddSrcRtgEntry_Guaranteed?relay SYMBOL "?relay", RTG_AddSrcRtgEntry_Guaranteed
RTG_CheckRtStatus   SYMBOL "RTG_CheckRtStatus"
??RTG_CheckRtStatus?relay SYMBOL "?relay", RTG_CheckRtStatus
aps_FindGroupForEndpoint SYMBOL "aps_FindGroupForEndpoint"
??aps_FindGroupForEndpoint?relay SYMBOL "?relay", aps_FindGroupForEndpoint
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_msg_allocate   SYMBOL "osal_msg_allocate"
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
sAddrExtCpy         SYMBOL "sAddrExtCpy"
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
AF_DataRequestSrcRtg SYMBOL "AF_DataRequestSrcRtg"
??AF_DataRequestSrcRtg?relay SYMBOL "?relay", AF_DataRequestSrcRtg
afAPSF_ConfigGet    SYMBOL "afAPSF_ConfigGet"
??afAPSF_ConfigGet?relay SYMBOL "?relay", afAPSF_ConfigGet
afAPSF_ConfigSet    SYMBOL "afAPSF_ConfigSet"
??afAPSF_ConfigSet?relay SYMBOL "?relay", afAPSF_ConfigSet
afCopyAddress       SYMBOL "afCopyAddress"
??afCopyAddress?relay SYMBOL "?relay", afCopyAddress
afDataConfirm       SYMBOL "afDataConfirm"
??afDataConfirm?relay SYMBOL "?relay", afDataConfirm
afDataReqMTU        SYMBOL "afDataReqMTU"
??afDataReqMTU?relay SYMBOL "?relay", afDataReqMTU
afDelete            SYMBOL "afDelete"
??afDelete?relay    SYMBOL "?relay", afDelete
afEndPoints         SYMBOL "afEndPoints"
??afEndPoints?relay SYMBOL "?relay", afEndPoints
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
??afFindEndPointDesc?relay SYMBOL "?relay", afFindEndPointDesc
afFindSimpleDesc    SYMBOL "afFindSimpleDesc"
??afFindSimpleDesc?relay SYMBOL "?relay", afFindSimpleDesc
afGetMatch          SYMBOL "afGetMatch"
??afGetMatch?relay  SYMBOL "?relay", afGetMatch
afIncomingData      SYMBOL "afIncomingData"
??afIncomingData?relay SYMBOL "?relay", afIncomingData
afNumEndPoints      SYMBOL "afNumEndPoints"
??afNumEndPoints?relay SYMBOL "?relay", afNumEndPoints
afRegister          SYMBOL "afRegister"
??afRegister?relay  SYMBOL "?relay", afRegister
afRegisterExtended  SYMBOL "afRegisterExtended"
??afRegisterExtended?relay SYMBOL "?relay", afRegisterExtended
afSetMatch          SYMBOL "afSetMatch"
??afSetMatch?relay  SYMBOL "?relay", afSetMatch

        EXTERN ??APSDE_DataReq?relay
        FUNCTION ??APSDE_DataReq?relay,00H
        EXTERN ??APSDE_DataReqMTU?relay
        FUNCTION ??APSDE_DataReqMTU?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_IsAddressBroadcast?relay
        FUNCTION ??NLME_IsAddressBroadcast?relay,00H
        EXTERN ??RTG_AddSrcRtgEntry_Guaranteed?relay
        FUNCTION ??RTG_AddSrcRtgEntry_Guaranteed?relay,00H
        EXTERN ??RTG_CheckRtStatus?relay
        FUNCTION ??RTG_CheckRtStatus?relay,00H
        EXTERN ??aps_FindGroupForEndpoint?relay
        FUNCTION ??aps_FindGroupForEndpoint?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN APSDE_DataReq
        FUNCTION APSDE_DataReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSDE_DataReqMTU
        FUNCTION APSDE_DataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_AddSrcRtgEntry_Guaranteed
        FUNCTION RTG_AddSrcRtgEntry_Guaranteed,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_CheckRtStatus
        FUNCTION RTG_CheckRtStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroupForEndpoint
        FUNCTION aps_FindGroupForEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN apsfSendFragmented
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\Project\ZStack\Components\stack\af\AF.c
//    1 /**************************************************************************************************
//    2   Filename:       AF.c
//    3   Revised:        $Date: 2011-11-18 16:03:29 -0800 (Fri, 18 Nov 2011) $
//    4   Revision:       $Revision: 28423 $
//    5 
//    6   Description:    Application Framework - Device Description helper functions
//    7 
//    8 
//    9   Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED �AS IS� WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "OSAL.h"
//   45 #include "AF.h"
//   46 #include "nwk_globals.h"
//   47 #include "nwk_util.h"
//   48 #include "aps_groups.h"
//   49 #include "ZDProfile.h"
//   50 #include "aps_frag.h"
//   51 #include "rtg.h"
//   52 
//   53 #if defined ( MT_AF_CB_FUNC )
//   54   #include "MT_AF.h"
//   55 #endif
//   56 
//   57 #if defined ( INTER_PAN )
//   58   #include "stub_aps.h"
//   59 #endif
//   60 
//   61 /*********************************************************************
//   62  * MACROS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * @fn      afSend
//   67  *
//   68  * @brief   Helper macro for V1 API to invoke V2 API.
//   69  *
//   70  * input parameters
//   71  *
//   72  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//   73  * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
//   74  * @param   cID - A valid cluster ID as specified by the Profile.
//   75  * @param   len - Number of bytes of data pointed to by next param.
//   76  * @param  *buf - A pointer to the data bytes to send.
//   77  * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
//   78  * @param  *transID - A pointer to a byte which can be modified and which will
//   79  *                    be used as the transaction sequence number of the msg.
//   80  *
//   81  * output parameters
//   82  *
//   83  * @param  *transID - Incremented by one if the return value is success.
//   84  *
//   85  * @return  afStatus_t - See previous definition of afStatus_... types.
//   86  */
//   87 #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \ 
//   88         AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \ 
//   89                           (cID), (len), (buf), (transID), (options), (radius) )
//   90 
//   91 /*********************************************************************
//   92  * GLOBAL VARIABLES
//   93  */
//   94 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   95 epList_t *epList;
epList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   96 
//   97 /*********************************************************************
//   98  * LOCAL FUNCTIONS
//   99  */
//  100 
//  101 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
//  102                 zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  103                 uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp );
//  104 
//  105 static epList_t *afFindEndPointDescList( uint8 EndPoint );
//  106 
//  107 static pDescCB afGetDescCB( endPointDesc_t *epDesc );
//  108 
//  109 /*********************************************************************
//  110  * PUBLIC FUNCTIONS
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * @fn      afInit
//  115  *
//  116  * @brief   Initialization function for the AF.
//  117  *
//  118  * @param   none
//  119  *
//  120  * @return  none
//  121 void afInit( void )
//  122 {
//  123 }
//  124  */
//  125 
//  126 /*********************************************************************
//  127  * @fn      afRegisterExtended
//  128  *
//  129  * @brief   Register an Application's EndPoint description.
//  130  *
//  131  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  132  * @param   descFn - pointer to descriptor callback function
//  133  *
//  134  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  135  *
//  136  * @return  Pointer to epList_t on success, NULL otherwise.
//  137  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  138 epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
afRegisterExtended:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function afRegisterExtended
        CODE
//  139 {
        FUNCALL afRegisterExtended, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  140   epList_t *ep = osal_mem_alloc(sizeof(epList_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x9
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
//  141 
//  142   if (ep != NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??afRegisterExtended_0
//  143   {
//  144     ep->nextDesc = epList;
        MOV     DPTR,#epList
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   ?Subroutine17 & 0xFFFF
//  145     epList = ep;
??CrossCallReturnLabel_103:
        MOV     DPTR,#epList
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine20 & 0xFFFF
//  146     ep->epDesc = epDesc;
//  147     ep->pfnDescCB = descFn;
//  148     ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
//  149     ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
//  150     ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
//  151   }
??CrossCallReturnLabel_27:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_26:
        INC     DPTR
        INC     DPTR
        MOV     A,#0x32
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     A,#0x1
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_21:
        INC     DPTR
        MOVX    @DPTR,A
//  152 
//  153   return ep;
??afRegisterExtended_0:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  154 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function afRegisterExtended
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+0
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_34:
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function afRegisterExtended
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_26
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+0
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function afRegisterExtended
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_20
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+0
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function afRegisterExtended
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_21
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+0
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function afRegisterExtended
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+0
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_35:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
//  155 
//  156 /*********************************************************************
//  157  * @fn      afRegister
//  158  *
//  159  * @brief   Register an Application's EndPoint description.
//  160  *
//  161  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  162  *
//  163  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  164  *
//  165  * @return  afStatus_SUCCESS - Registered
//  166  *          afStatus_MEM_FAIL - not enough memory to add descriptor
//  167  *          afStatus_INVALID_PARAMETER - duplicate endpoint
//  168  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  169 afStatus_t afRegister( endPointDesc_t *epDesc )
afRegister:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function afRegister
        CODE
//  170 {
        FUNCALL afRegister, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afRegister, afRegisterExtended
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  171   if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afFindEndPointDescList?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??afRegister_0
//  172   {
//  173     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??afRegister_1
//  174   }
//  175 
//  176   return ((NULL == afRegisterExtended(epDesc, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
??afRegister_0:
        ; Setup parameters for call to function afRegisterExtended
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??afRegisterExtended?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??afRegister_2
        MOV     R1,#0x10
        SJMP    ??afRegister_1
??afRegister_2:
        MOV     R1,#0x0
??afRegister_1:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock12
//  177 }
//  178 
//  179 /*********************************************************************
//  180  * @fn      afDelete
//  181  *
//  182  * @brief   Delete an Application's EndPoint descriptor and frees the memory
//  183  *
//  184  * @param   EndPoint - Application Endpoint to delete
//  185  *
//  186  * @return  afStatus_SUCCESS - endpoint deleted
//  187  *          afStatus_INVALID_PARAMETER - endpoint not found
//  188  *          afStatus_FAILED - endpoint list empty
//  189  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  190 afStatus_t afDelete( uint8 EndPoint )
afDelete:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function afDelete
        CODE
//  191 {
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  192   epList_t *epCurrent;
//  193   epList_t *epPrevious;
//  194 
//  195   if (epList != NULL)
        MOV     DPTR,#epList
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_65:
        JZ      ??afDelete_0
//  196   {
//  197     epPrevious = epCurrent = epList;
        MOV     DPTR,#epList
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV     R1,A
//  198 
//  199     // first element of the list matches
//  200     if (epCurrent->epDesc->endPoint == EndPoint)
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_12:
        JNZ     ??afDelete_1
//  201     {
//  202       epList = epCurrent->nextDesc;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine29_0 & 0xFFFF
//  203       osal_mem_free(epCurrent);
//  204 
//  205       return (afStatus_SUCCESS);
//  206     }
??CrossCallReturnLabel_56:
        MOV     DPTR,#epList
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??afDelete_2
//  207     else
//  208     {
//  209       // search the list
//  210       for (epCurrent = epPrevious->nextDesc; epCurrent != NULL; epPrevious = epCurrent)
??afDelete_1:
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        JNZ     ??afDelete_3
//  211       {
//  212         if (epCurrent->epDesc->endPoint == EndPoint)
//  213         {
//  214           epPrevious->nextDesc = epCurrent->nextDesc;
//  215           osal_mem_free(epCurrent);
//  216 
//  217           // delete the entry and free the memory
//  218           return (afStatus_SUCCESS);
//  219         }
//  220       }
//  221     }
//  222 
//  223     // no endpoint found
//  224     return (afStatus_INVALID_PARAMETER);
        MOV     R1,#0x2
        SJMP    ??afDelete_4
??afDelete_5:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
??afDelete_3:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_13:
        JNZ     ??afDelete_5
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
??afDelete_2:
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay
        MOV     R1,#0x0
        SJMP    ??afDelete_4
//  225   }
//  226   else
//  227   {
//  228     // epList is empty
//  229     return (afStatus_FAILED);
??afDelete_0:
        MOV     R1,#0x1
          CFI EndBlock cfiBlock13
//  230   }
??afDelete_4:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  231 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function afDelete
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+0
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R4
        MOVX    A,@DPTR
        XRL     A,R6
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17
//  232 
//  233 /*********************************************************************
//  234  * @fn          afDataConfirm
//  235  *
//  236  * @brief       This function will generate the Data Confirm back to
//  237  *              the application.
//  238  *
//  239  * @param       endPoint - confirm end point
//  240  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  241  * @param       status - status of APSDE_DATA_REQUEST
//  242  *
//  243  * @return      none
//  244  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  245 void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
afDataConfirm:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function afDataConfirm
        CODE
//  246 {
        FUNCALL afDataConfirm, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 2,R3
//  247   endPointDesc_t *epDesc;
//  248   afDataConfirm_t *msgPtr;
//  249 
//  250   // Find the endpoint description
//  251   epDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ??afFindEndPointDesc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  252   if ( epDesc == NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afDataConfirm_0
//  253     return;
//  254 
//  255   // Determine the incoming command type
//  256   msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
//  257   if ( msgPtr )
        MOV     A,R2
        ORL     A,R3
        JZ      ??afDataConfirm_0
//  258   {
//  259     // Build the Data Confirm message
//  260     msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x3
        MOVX    @DPTR,A
//  261     msgPtr->hdr.status = status;
        INC     DPTR
        MOV     A,?V0 + 2
        LCALL   ?Subroutine20 & 0xFFFF
//  262     msgPtr->endpoint = endPoint;
??CrossCallReturnLabel_28:
        MOV     A,?V0 + 0
        LCALL   ?Subroutine20 & 0xFFFF
//  263     msgPtr->transID = transID;
??CrossCallReturnLabel_29:
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  264 
//  265 #if defined ( MT_AF_CB_FUNC )
//  266     /* If MT has subscribed for this callback, don't send as a message. */
//  267     if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
//  268     {
//  269       /* Send callback if it's subscribed */
//  270       MT_AfDataConfirm ((void *)msgPtr);
//  271       /* Release the memory. */
//  272       osal_msg_deallocate( (void *)msgPtr );
//  273     }
//  274     else
//  275 #endif
//  276     {
//  277       /* send message through task message */
//  278       osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine32_0 & 0xFFFF
//  279     }
//  280   }
??CrossCallReturnLabel_75:
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
??afDataConfirm_0:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock18
//  281 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function afDataConfirm
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+0
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function afDataConfirm
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+0
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  282 
//  283 /*********************************************************************
//  284  * @fn          afIncomingData
//  285  *
//  286  * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
//  287  *
//  288  * @param       aff  - pointer to APS frame format
//  289  * @param       SrcAddress  - Source address
//  290  * @param       SrcPanId  - Source PAN ID
//  291  * @param       sig - incoming message's link quality
//  292  * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
//  293  * @param       SecurityUse - Security enable/disable
//  294  * @param       timestamp - the MAC Timer2 timestamp at Rx.
//  295  *
//  296  * @return      none
//  297  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  298 void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
afIncomingData:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function afIncomingData
        CODE
//  299                      NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp )
//  300 {
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afBuildMSGIncoming
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x1e
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
        ; Saved register size: 30
        ; Auto size: 0
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 20,R4
        MOV     ?V0 + 21,R5
        MOV     ?V0 + 15,R1
//  301   endPointDesc_t *epDesc = NULL;
//  302   epList_t *pList = epList;
        MOV     DPTR,#epList
        LCALL   ?Subroutine5 & 0xFFFF
//  303 #if !defined ( APS_NO_GROUPS )
//  304   uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
??CrossCallReturnLabel_0:
        MOV     ?V0 + 6,#-0x2
//  305 #endif
//  306 
//  307   if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ANL     A,#0xc
        XRL     A,#0xc
        JNZ     ??afIncomingData_0
//  308   {
//  309 #if !defined ( APS_NO_GROUPS )
//  310     // Find the first endpoint for this group
//  311     grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV     R1,#-0x2
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL   ??aps_FindGroupForEndpoint?relay
        MOV     A,R1
        MOV     ?V0 + 6,A
//  312     if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
        MOV     A,#-0x2
        XRL     A,?V0 + 6
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  313       return;   // No endpoint found
//  314 
//  315     epDesc = afFindEndPointDesc( grpEp );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ??afFindEndPointDesc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  316     if ( epDesc == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     ??afIncomingData_2
        LJMP    ??afIncomingData_1 & 0xFFFF
//  317       return;   // Endpoint descriptor not found
//  318 
//  319     pList = afFindEndPointDescList( epDesc->endPoint );
//  320 #else
//  321     return; // Not supported
//  322 #endif
//  323   }
//  324   else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
??afIncomingData_0:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??afIncomingData_3
//  325   {
//  326     // Set the list
//  327     if ( pList != NULL )
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  328     {
//  329       epDesc = pList->epDesc;
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??afIncomingData_4:
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 18,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 19,A
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 14,A
        MOV     A,#0x23
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        SJMP    ??afIncomingData_5
//  330     }
//  331   }
//  332   else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
??afIncomingData_3:
        ; Setup parameters for call to function afFindEndPointDesc
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afFindEndPointDesc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??afIncomingData_4
//  333   {
//  334     pList = afFindEndPointDescList( epDesc->endPoint );
??afIncomingData_2:
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afFindEndPointDescList?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        SJMP    ??afIncomingData_4
//  335   }
//  336 
//  337   while ( epDesc )
//  338   {
//  339     uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
//  340 
//  341     if ( pList->pfnDescCB )
//  342     {
//  343       uint16 *pID = (uint16 *)(pList->pfnDescCB(
//  344                                  AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
//  345       if ( pID )
//  346       {
//  347         epProfileID = *pID;
//  348         osal_mem_free( pID );
//  349       }
//  350     }
//  351     else if ( epDesc->simpleDesc )
//  352     {
//  353       epProfileID = epDesc->simpleDesc->AppProfId;
//  354     }
//  355 
//  356     if ( (aff->ProfileID == epProfileID) ||
//  357          ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
//  358     {
//  359       {
//  360         // Save original endpoint
//  361         uint8 endpoint = aff->DstEndPoint;
//  362 
//  363         // overwrite with descriptor's endpoint
//  364         aff->DstEndPoint = epDesc->endPoint;
//  365 
//  366         afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
//  367                            nwkSeqNum, SecurityUse, timestamp );
//  368 
//  369         // Restore with original endpoint
//  370         aff->DstEndPoint = endpoint;
//  371       }
//  372     }
//  373 
//  374     if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
//  375     {
//  376 #if !defined ( APS_NO_GROUPS )
//  377       // Find the next endpoint for this group
//  378       grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
//  379       if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
//  380         return;   // No endpoint found
//  381 
//  382       epDesc = afFindEndPointDesc( grpEp );
//  383       if ( epDesc == NULL )
//  384         return;   // Endpoint descriptor not found
//  385 
//  386       pList = afFindEndPointDescList( epDesc->endPoint );
//  387 #else
//  388       return;
//  389 #endif
//  390     }
//  391     else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
//  392     {
//  393       pList = pList->nextDesc;
//  394       if ( pList )
//  395         epDesc = pList->epDesc;
??afIncomingData_6:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??afIncomingData_5:
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
        SJMP    ??afIncomingData_7
??afIncomingData_8:
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV     R1,?V0 + 6
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_95:
        LCALL   ??aps_FindGroupForEndpoint?relay
        MOV     A,R1
        MOV     ?V0 + 6,A
        MOV     A,#-0x2
        XRL     A,?V0 + 6
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ??afFindEndPointDesc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afFindEndPointDescList?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
??afIncomingData_7:
        MOV     ?V0 + 10,#-0x1
        MOV     ?V0 + 11,#-0x1
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV     DPL,R6
        MOV     DPH,R7
        JZ      ??afIncomingData_9
        ; Setup parameters for indirect call
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x2
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_82:
        LCALL   ?CALL_IND
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_10
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay
        SJMP    ??CrossCallReturnLabel_10
??afIncomingData_9:
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_67:
        JZ      ??CrossCallReturnLabel_10
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_83:
        INC     DPTR
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 10
        JNZ     ??afIncomingData_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 11
??afIncomingData_10:
        JZ      ??afIncomingData_11
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??afIncomingData_12
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_70:
        JNZ     ??afIncomingData_12
??afIncomingData_11:
        MOV     A,?V0 + 8
        ADD     A,#0x2
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 9
        ADDC    A,#0x0
        MOV     ?V0 + 11,A
        MOV     DPL,?V0 + 10
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        MOVX    @DPTR,A
        ; Setup parameters for call to function afBuildMSGIncoming
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,?V0 + 14
        MOV     ?V0 + 16,A
        MOV     R0,#?V0 + 16
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R0,#?V0 + 18
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 16,?V0 + 20
        MOV     ?V0 + 17,?V0 + 21
        MOV     R0,#?V0 + 16
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R1,?V0 + 15
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        LCALL   ??afBuildMSGIncoming?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
??afIncomingData_12:
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        MOVX    A,@DPTR
        ANL     A,#0xc
        XRL     A,#0xc
        JNZ     $+5
        LJMP    ??afIncomingData_8 & 0xFFFF
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??afIncomingData_1
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      $+5
        LJMP    ??afIncomingData_6 & 0xFFFF
//  396       else
//  397         epDesc = NULL;
//  398     }
//  399     else
//  400       epDesc = NULL;
??afIncomingData_1:
        MOV     R7,#0x16
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock23
//  401   }
//  402 }
//  403 
//  404 /*********************************************************************
//  405  * @fn          afBuildMSGIncoming
//  406  *
//  407  * @brief       Build the message for the app
//  408  *
//  409  * @param
//  410  *
//  411  * @return      pointer to next in data buffer
//  412  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  413 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
afBuildMSGIncoming:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function afBuildMSGIncoming
        CODE
//  414                  zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  415                  uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp )
//  416 {
        FUNCALL afBuildMSGIncoming, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, afCopyAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x1a
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 26)
        ; Saved register size: 26
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 9,R1
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 16,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 17,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     ?V0 + 12,?V0 + 4
        MOV     ?V0 + 13,?V0 + 5
        MOV     ?V0 + 14,?V0 + 6
        MOV     ?V0 + 15,?V0 + 7
//  417   afIncomingMSGPacket_t *MSGpkt;
//  418   const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
//  419   uint8 *asdu = aff->asdu;
        MOV     A,R2
        ADD     A,#0xe
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   ?Subroutine5 & 0xFFFF
//  420   MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,R2
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_37:
        MOVX    A,@DPTR
        ADD     A,#0x24
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R6,?V0 + 6
        MOV     R7,?V0 + 7
//  421 
//  422   if ( MSGpkt == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
//  423   {
//  424     return;
//  425   }
//  426 
//  427   MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1a
        LCALL   ?Subroutine18 & 0xFFFF
//  428   MSGpkt->groupId = aff->GroupID;
??CrossCallReturnLabel_22:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ??Subroutine38_0 & 0xFFFF
//  429   MSGpkt->clusterId = aff->ClusterID;
??CrossCallReturnLabel_96:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine38_0 & 0xFFFF
//  430   afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
??CrossCallReturnLabel_97:
        ; Setup parameters for call to function afCopyAddress
        MOV     R4,?V0 + 16
        MOV     R5,?V0 + 17
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??afCopyAddress?relay
//  431   MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0xf
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_40:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  432   MSGpkt->endPoint = epDesc->endPoint;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x14
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_41:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  433   MSGpkt->wasBroadcast = aff->wasBroadcast;
        MOV     A,?V0 + 0
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_38:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x15
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_42:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  434   MSGpkt->LinkQuality = sig->LinkQuality;
??CrossCallReturnLabel_14:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x16
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_43:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  435   MSGpkt->correlation = sig->correlation;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x17
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_44:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  436   MSGpkt->rssi = sig->rssi;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x18
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_45:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  437   MSGpkt->SecurityUse = SecurityUse;
        MOV     A,R6
        ADD     A,#0x19
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
//  438   MSGpkt->timestamp = timestamp;
        MOV     A,R6
        ADD     A,#0x1a
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
//  439   MSGpkt->nwkSeqNum = nwkSeqNum;
        MOV     A,R6
        ADD     A,#0x1e
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     A,?V0 + 9
        LCALL   ?Subroutine18 & 0xFFFF
//  440   MSGpkt->macDestAddr = aff->macDestAddr;
??CrossCallReturnLabel_23:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     A,R6
        ADD     A,#0x12
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL   ??Subroutine38_0 & 0xFFFF
//  441   MSGpkt->srcAddr.panId = SrcPanId;
??CrossCallReturnLabel_98:
        MOV     A,R6
        ADD     A,#0x10
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     A,?V0 + 10
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 11
        MOVX    @DPTR,A
//  442   MSGpkt->cmd.TransSeqNumber = 0;
        MOV     A,R6
        ADD     A,#0x1f
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_51:
        CLR     A
        MOVX    @DPTR,A
        MOV     A,?V0 + 0
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_39:
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  443   MSGpkt->cmd.DataLength = aff->asduLength;
//  444 
//  445   if ( MSGpkt->cmd.DataLength )
        MOV     A,R0
        JZ      ??afBuildMSGIncoming_1
//  446   {
//  447     MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
        MOV     A,R6
        ADD     A,#0x22
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0x24
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        LCALL   ?Subroutine17 & 0xFFFF
//  448     osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
??CrossCallReturnLabel_104:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 29)
        LCALL   ?Subroutine22 & 0xFFFF
//  449   }
??CrossCallReturnLabel_54:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_86:
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        SJMP    ??afBuildMSGIncoming_2
//  450   else
//  451   {
//  452     MSGpkt->cmd.Data = NULL;
??afBuildMSGIncoming_1:
        MOV     A,R6
        ADD     A,#0x22
        LCALL   ??Subroutine26_0 & 0xFFFF
//  453   }
??CrossCallReturnLabel_52:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  454 
//  455 #if defined ( MT_AF_CB_FUNC )
//  456   // If ZDO or SAPI have registered for this endpoint, dont intercept it here
//  457   if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
//  458   {
//  459     MT_AfIncomingMsg( (void *)MSGpkt );
//  460     // Release the memory.
//  461     osal_msg_deallocate( (void *)MSGpkt );
//  462   }
//  463   else
//  464 #endif
//  465   {
//  466     // Send message through task message.
//  467     osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
??afBuildMSGIncoming_2:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine32_0 & 0xFFFF
//  468   }
??CrossCallReturnLabel_76:
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  469 }
??afBuildMSGIncoming_0:
        MOV     R7,#0x12
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function afBuildMSGIncoming
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+0
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOV     A,R6
        ADD     A,#0x20
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-1
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function afBuildMSGIncoming
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-1
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function afBuildMSGIncoming
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-1
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function afBuildMSGIncoming
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-1
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function afBuildMSGIncoming
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-1
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function afBuildMSGIncoming
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-1
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function afBuildMSGIncoming
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+0
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function afBuildMSGIncoming
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+0
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function afBuildMSGIncoming
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+0
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function afBuildMSGIncoming
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+0
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function afBuildMSGIncoming
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+0
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function afBuildMSGIncoming
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+0
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function afBuildMSGIncoming
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+0
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function afBuildMSGIncoming
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+0
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function afBuildMSGIncoming
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+0
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        MOV     DPL,A
        MOV     A,R7
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function afBuildMSGIncoming
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+0
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function afBuildMSGIncoming
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+0
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function afBuildMSGIncoming
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+0
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function afBuildMSGIncoming
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-1
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function afBuildMSGIncoming
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-1
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function afBuildMSGIncoming
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-1
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function afBuildMSGIncoming
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-1
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function afBuildMSGIncoming
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-1
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function afBuildMSGIncoming
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-1
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function afBuildMSGIncoming
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+0
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function afBuildMSGIncoming
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+0
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function afBuildMSGIncoming
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+0
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function afBuildMSGIncoming
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+0
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function afBuildMSGIncoming
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+0
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function afBuildMSGIncoming
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+0
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function afBuildMSGIncoming
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+0
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function afBuildMSGIncoming
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond61) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+0
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function afBuildMSGIncoming
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+0
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker63 Using cfiCommon1
          CFI (cfiPicker63) NoFunction
          CFI (cfiPicker63) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiPicker63

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond64 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function afIncomingData
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond65) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+0
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function afBuildMSGIncoming
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+0
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
        RET
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond68 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function afBuildMSGIncoming
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+0
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker70 Using cfiCommon1
          CFI (cfiPicker70) NoFunction
          CFI (cfiPicker70) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond71 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function afIncomingData
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond72) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+0
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function afBuildMSGIncoming
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+0
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function AF_DataRequestSrcRtg
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+0
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        RET
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75
//  470 
//  471 /*********************************************************************
//  472  * @fn      AF_DataRequest
//  473  *
//  474  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  475  *          SendMulti and MSG-Send.
//  476  *
//  477  * input parameters
//  478  *
//  479  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  480  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  481  * @param   cID - A valid cluster ID as specified by the Profile.
//  482  * @param   len - Number of bytes of data pointed to by next param.
//  483  * @param  *buf - A pointer to the data bytes to send.
//  484  * @param  *transID - A pointer to a byte which can be modified and which will
//  485  *                    be used as the transaction sequence number of the msg.
//  486  * @param   options - Valid bit mask of Tx options.
//  487  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  488  *
//  489  * output parameters
//  490  *
//  491  * @param  *transID - Incremented by one if the return value is success.
//  492  *
//  493  * @return  afStatus_t - See previous definition of afStatus_... types.
//  494  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  495 uint8 AF_DataRequestDiscoverRoute = TRUE;
AF_DataRequestDiscoverRoute:
        DATA8
        DS 1
        REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  496 afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequest:
          CFI Block cfiBlock76 Using cfiCommon0
          CFI Function AF_DataRequest
        CODE
//  497                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  498                            uint8 options, uint8 radius )
//  499 {
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, RTG_CheckRtStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_IsAddressBroadcast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, APSDE_DataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     ?V0 + 4,R1
        MOV     A,#0x30
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  500   pDescCB pfnDescCB;
//  501   ZStatus_t stat;
//  502   APSDE_DataReq_t req;
//  503   afDataReqMTU_t mtu;
//  504 
//  505   // Verify source end point
//  506   if ( srcEP == NULL )
        MOV     A,R4
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??AF_DataRequest_0 & 0xFFFF
//  507   {
//  508     return afStatus_INVALID_PARAMETER;
//  509   }
//  510 
//  511 #if !defined( REFLECTOR )
//  512   if ( dstAddr->addrMode == afAddrNotPresent )
//  513   {
//  514     return afStatus_INVALID_PARAMETER;
//  515   }
//  516 #endif
//  517 
//  518   // Check if route is available before sending data
//  519   if ( options & AF_LIMIT_CONCENTRATOR  )
        MOV     A,R1
        MOV     C,0xE0 /* A   */.3
        JNC     ??AF_DataRequest_1
//  520   {
//  521     if ( dstAddr->addrMode != afAddr16Bit )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??AF_DataRequest_0 & 0xFFFF
//  522     {
//  523       return ( afStatus_INVALID_PARAMETER );
//  524     }
//  525 
//  526     // First, make sure the destination is not its self, then check for an existing route.
//  527     if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
//  528         && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R0,?V0 + 8
        MOV     R1,?V0 + 9
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??AF_DataRequest_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??AF_DataRequest_2:
        JZ      ??AF_DataRequest_1
        ; Setup parameters for call to function RTG_CheckRtStatus
        MOV     R4,#0x3
        MOV     R1,#0x1
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_87:
        LCALL   ??RTG_CheckRtStatus?relay
        MOV     A,R1
        JZ      ??AF_DataRequest_1
//  529     {
//  530       // A valid route to a concentrator wasn't found
//  531       return ( afStatus_NO_ROUTE );
        MOV     R1,#-0x33
        LJMP    ??AF_DataRequest_3 & 0xFFFF
//  532     }
//  533   }
//  534 
//  535   // Validate broadcasting
//  536   if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
//  537        ( dstAddr->addrMode == afAddrBroadcast )    )
??AF_DataRequest_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??AF_DataRequest_4
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??AF_DataRequest_5
//  538   {
//  539     // Check for valid broadcast values
//  540     if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
??AF_DataRequest_4:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL   ??NLME_IsAddressBroadcast?relay
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JZ      ??AF_DataRequest_6
//  541     {
//  542       // Force mode to broadcast
//  543       dstAddr->addrMode = afAddrBroadcast;
        MOV     A,#0xf
        MOVX    @DPTR,A
//  544     }
//  545     else
//  546     {
//  547       // Address is not a valid broadcast type
//  548       if ( dstAddr->addrMode == afAddrBroadcast )
//  549       {
//  550         return afStatus_INVALID_PARAMETER;
//  551       }
//  552     }
//  553   }
//  554   else if ( dstAddr->addrMode != afAddr64Bit &&
//  555             dstAddr->addrMode != afAddrGroup &&
//  556             dstAddr->addrMode != afAddrNotPresent )
//  557   {
//  558     return afStatus_INVALID_PARAMETER;
//  559   }
//  560 
//  561   // Set destination address
//  562   req.dstAddr.addrMode = dstAddr->addrMode;
??AF_DataRequest_7:
        MOV     A,R6
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R7
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_32:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine21 & 0xFFFF
//  563   if ( dstAddr->addrMode == afAddr64Bit )
??CrossCallReturnLabel_30:
        JNZ     ??AF_DataRequest_8
//  564     osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??CrossCallReturnLabel_99
??AF_DataRequest_6:
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??AF_DataRequest_7
        SJMP    ??AF_DataRequest_0
??AF_DataRequest_5:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??AF_DataRequest_7
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??AF_DataRequest_7
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??AF_DataRequest_7
??AF_DataRequest_0:
        MOV     R1,#0x2
        LJMP    ??AF_DataRequest_3 & 0xFFFF
//  565   else
//  566     req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
??AF_DataRequest_8:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
//  567 
//  568   req.profileID = ZDO_PROFILE_ID;
??CrossCallReturnLabel_99:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  569 
//  570   if ( (pfnDescCB = afGetDescCB( srcEP )) )
        MOV     DPTR,#epList
??AF_DataRequest_9:
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_64:
        JZ      ??AF_DataRequest_10
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV     A,?V0 + 0
        XRL     A,R2
        JNZ     ??AF_DataRequest_11
        MOV     A,?V0 + 1
        XRL     A,R3
??AF_DataRequest_11:
        MOV     DPL,R0
        MOV     DPH,R1
        JNZ     ??AF_DataRequest_9
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??AF_DataRequest_10
//  571   {
//  572     uint16 *pID = (uint16 *)(pfnDescCB(
//  573                                  AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
        ; Setup parameters for indirect call
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x2
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?CALL_IND
//  574     if ( pID )
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_101
//  575     {
//  576       req.profileID = *pID;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
//  577       osal_mem_free( pID );
??CrossCallReturnLabel_100:
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay
        SJMP    ??CrossCallReturnLabel_101
//  578     }
//  579   }
//  580   else if ( srcEP->simpleDesc )
??AF_DataRequest_10:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_68:
        JZ      ??CrossCallReturnLabel_101
//  581   {
//  582     req.profileID = srcEP->simpleDesc->AppProfId;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine10 & 0xFFFF
//  583   }
??CrossCallReturnLabel_84:
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
//  584 
//  585   req.txOptions = 0;
??CrossCallReturnLabel_101:
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  586 
//  587   if ( ( options & AF_ACK_REQUEST              ) &&
//  588        ( req.dstAddr.addrMode != AddrBroadcast ) &&
//  589        ( req.dstAddr.addrMode != AddrGroup     )    )
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.4
        JNC     ??AF_DataRequest_12
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xf
        JZ      ??AF_DataRequest_12
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??AF_DataRequest_12
//  590   {
//  591     req.txOptions |=  APS_TX_OPTIONS_ACK;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  592   }
//  593 
//  594   if ( options & AF_SKIP_ROUTING )
??AF_DataRequest_12:
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.7
        JNC     ??AF_DataRequest_13
//  595   {
//  596     req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x10
        MOVX    @DPTR,A
//  597   }
//  598 
//  599   if ( options & AF_EN_SECURITY )
??AF_DataRequest_13:
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.6
        JNC     ??AF_DataRequest_14
//  600   {
//  601     req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x1
        MOVX    @DPTR,A
//  602     mtu.aps.secure = TRUE;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??AF_DataRequest_15
//  603   }
//  604   else
//  605   {
//  606     mtu.aps.secure = FALSE;
??AF_DataRequest_14:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??AF_DataRequest_15:
        MOVX    @DPTR,A
//  607   }
//  608 
//  609   if ( options & AF_PREPROCESS )
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.2
        JNC     ??AF_DataRequest_16
//  610   {
//  611     req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x40
        MOVX    @DPTR,A
//  612   }
//  613 
//  614   mtu.kvp = FALSE;
??AF_DataRequest_16:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     ?V0 + 8,R0
        MOV     ?V0 + 9,R1
//  615 
//  616   req.transID       = *transID;
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine18 & 0xFFFF
//  617   req.srcEP         = srcEP->endPoint;
??CrossCallReturnLabel_24:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  618   req.dstEP         = dstAddr->endPoint;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  619   req.clusterID     = cID;
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
        MOV     A,#0x32
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  620   req.asduLen       = len;
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  621   req.asdu          = buf;
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
//  622   req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
        MOV     DPTR,#AF_DataRequestDiscoverRoute
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  623   req.radiusCounter = radius;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  624 #if defined ( INTER_PAN )
//  625   req.dstPanId      = dstAddr->panId;
//  626 
//  627   if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
//  628   {
//  629     if ( len > INTERP_DataReqMTU() )
//  630     {
//  631       stat = afStatus_INVALID_PARAMETER;
//  632     }
//  633     else
//  634     {
//  635       stat = INTERP_DataReq( &req );
//  636     }
//  637   }
//  638   else
//  639 #endif // INTER_PAN
//  640   {
//  641     if (len > afDataReqMTU( &mtu ) )
        ; Setup parameters for call to function afDataReqMTU
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??afDataReqMTU?relay
        MOV     A,R1
        CLR     C
        SUBB    A,R6
        CLR     A
        SUBB    A,R7
        JNC     ??AF_DataRequest_17
//  642     {
//  643       if (apsfSendFragmented)
        MOV     DPTR,#apsfSendFragmented
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_66:
        JZ      ??AF_DataRequest_18
//  644       {
//  645         stat = (*apsfSendFragmented)( &req );
        ; Setup parameters for indirect call
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#apsfSendFragmented + 1
        LCALL   ??Subroutine34_0 & 0xFFFF
//  646       }
??CrossCallReturnLabel_79:
        LCALL   ?CALL_IND
        SJMP    ??AF_DataRequest_19
//  647       else
//  648       {
//  649         stat = afStatus_INVALID_PARAMETER;
??AF_DataRequest_18:
        MOV     R6,#0x2
        SJMP    ??AF_DataRequest_20
//  650       }
//  651     }
//  652     else
//  653     {
//  654       stat = APSDE_DataReq( &req );
??AF_DataRequest_17:
        ; Setup parameters for call to function APSDE_DataReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSDE_DataReq?relay
??AF_DataRequest_19:
        MOV     A,R1
        MOV     R6,A
//  655     }
//  656   }
//  657 
//  658   /*
//  659    * If this is an EndPoint-to-EndPoint message on the same device, it will not
//  660    * get added to the NWK databufs. So it will not go OTA and it will not get
//  661    * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
//  662    * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
//  663    * message with the first in line TransSeqNumber, even on a multi message.
//  664    * Also note that a reflected msg will not have its confirmation generated
//  665    * here.
//  666    */
//  667   if ( (req.dstAddr.addrMode == Addr16Bit) &&
//  668        (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
??AF_DataRequest_20:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??AF_DataRequest_21
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??AF_DataRequest_22
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??AF_DataRequest_22:
        JNZ     ??AF_DataRequest_21
//  669   {
//  670     afDataConfirm( srcEP->endPoint, *transID, stat );
        ; Setup parameters for call to function afDataConfirm
        MOV     A,R6
        MOV     R3,A
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afDataConfirm?relay
//  671   }
//  672 
//  673   if ( stat == afStatus_SUCCESS )
??AF_DataRequest_21:
        MOV     A,R6
        JNZ     ??AF_DataRequest_23
//  674   {
//  675     (*transID)++;
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  676   }
//  677 
//  678   return (afStatus_t)stat;
??AF_DataRequest_23:
        MOV     A,R6
        MOV     R1,A
??AF_DataRequest_3:
        MOV     A,#0x1e
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock76
//  679 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function afBuildMSGIncoming
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond78) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+0
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function AF_DataRequest
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+0
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker80 Using cfiCommon1
          CFI (cfiPicker80) NoFunction
          CFI (cfiPicker80) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        RET
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiPicker80

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond81 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function AF_DataRequest
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+0
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function afBuildMSGIncoming
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+0
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function AF_DataRequest
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+0
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        INC     DPTR
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function afDelete
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+0
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function AF_DataRequest
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+0
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function AF_DataRequest
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+0
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function AF_DataRequest
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+0
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function afCopyAddress
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+0
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function AF_DataRequest
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+0
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function afBuildMSGIncoming
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+0
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function AF_DataRequest
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+0
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker97 Using cfiCommon1
          CFI (cfiPicker97) NoFunction
          CFI (cfiPicker97) Picker
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_73:
        RET
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiPicker97

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond98 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function afBuildMSGIncoming
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_5
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond99) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+0
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function afBuildMSGIncoming
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_62
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+0
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function AF_DataRequest
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_63
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+0
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function AF_DataRequest
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_61
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+0
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function afRegisterExtended
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_55
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+0
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function afDelete
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_56
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+0
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function AF_DataRequest
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_57
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+0
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function AF_DataRequest
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_58
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+0
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function AF_DataRequest
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_59
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+0
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function afCopyAddress
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_60
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+0
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function afIncomingData
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_69
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond109) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond109) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond109) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond109) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond109) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond109) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+0
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function afIncomingData
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_70
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond110) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond110) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond110) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+0
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function afIncomingData
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_67
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond111) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond111) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond111) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond111) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond111) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond111) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond111) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+0
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function AF_DataRequest
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_68
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+0
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function afDelete
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_65
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+0
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function AF_DataRequest
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_64
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+0
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function AF_DataRequest
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_66
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+0
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function afBuildMSGIncoming
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_14
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond116) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+0
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function afNumEndPoints
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_15
          CFI (cfiCond117) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond117) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond117) CFA_SP SP+-5
          CFI Block cfiPicker118 Using cfiCommon1
          CFI (cfiPicker118) NoFunction
          CFI (cfiPicker118) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiPicker118

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond119 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function afIncomingData
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond120) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond120) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond120) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond120) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond120) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond120) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond120) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+0
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker121 Using cfiCommon1
          CFI (cfiPicker121) NoFunction
          CFI (cfiPicker121) Picker
        INC     DPTR
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiPicker121
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiCond122 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function AF_DataRequest
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+0
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function afIncomingData
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond124) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond124) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond124) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond124) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond124) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond124) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+0
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function afIncomingData
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond125) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond125) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond125) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond125) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond125) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+0
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker126 Using cfiCommon1
          CFI (cfiPicker126) NoFunction
          CFI (cfiPicker126) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiPicker126
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiCond127 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function AF_DataRequest
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+0
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function AF_DataRequest
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+0
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function afIncomingData
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond130) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+0
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function AF_DataRequest
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+0
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function afIncomingData
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond132) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond132) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond132) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond132) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond132) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+0
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function afIncomingData
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond133) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond133) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond133) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond133) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond133) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+0
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker134 Using cfiCommon1
          CFI (cfiPicker134) NoFunction
          CFI (cfiPicker134) Picker
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiPicker134
//  680 
//  681 #if defined ( ZIGBEE_SOURCE_ROUTING )
//  682 /*********************************************************************
//  683  * @fn      AF_DataRequestSrcRtg
//  684  *
//  685  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  686  *          SendMulti and MSG-Send.
//  687  *
//  688  * input parameters
//  689  *
//  690  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  691  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  692  * @param   cID - A valid cluster ID as specified by the Profile.
//  693  * @param   len - Number of bytes of data pointed to by next param.
//  694  * @param  *buf - A pointer to the data bytes to send.
//  695  * @param  *transID - A pointer to a byte which can be modified and which will
//  696  *                    be used as the transaction sequence number of the msg.
//  697  * @param   options - Valid bit mask of Tx options.
//  698  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  699  * @param   relayCnt - Number of devices in the relay list
//  700  * @param   pRelayList - Pointer to the relay list
//  701  *
//  702  * output parameters
//  703  *
//  704  * @param  *transID - Incremented by one if the return value is success.
//  705  *
//  706  * @return  afStatus_t - See previous definition of afStatus_... types.
//  707  */
//  708 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  709 afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequestSrcRtg:
          CFI Block cfiBlock135 Using cfiCommon0
          CFI Function AF_DataRequestSrcRtg
        CODE
//  710                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  711                            uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
//  712 {
        FUNCALL AF_DataRequestSrcRtg, RTG_AddSrcRtgEntry_Guaranteed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequestSrcRtg, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     ?V0 + 10,R1
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  713   uint8 status;
//  714 
//  715   /* Add the source route to the source routing table */
//  716   status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
//  717                                          pRelayList );
??CrossCallReturnLabel_18:
        ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL   ??RTG_AddSrcRtgEntry_Guaranteed?relay
        MOV     A,R1
//  718 
//  719   if( status == RTG_SUCCESS)
        JNZ     ??AF_DataRequestSrcRtg_0
//  720   {
//  721     /* Call AF_DataRequest to send the data */
//  722     status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
        ; Setup parameters for call to function AF_DataRequest
        MOV     R0,#?V0 + 11
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R1,?V0 + 10
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        SJMP    ??AF_DataRequestSrcRtg_1
//  723   }
//  724   else if( status == RTG_INVALID_PATH )
??AF_DataRequestSrcRtg_0:
        MOV     A,#0x5
        XRL     A,R1
        JNZ     ??AF_DataRequestSrcRtg_2
//  725   {
//  726     /* The source route relay count is exceeding the network limit */
//  727     status = afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??AF_DataRequestSrcRtg_1
//  728   }
//  729   else
//  730   {
//  731     /* The guaranteed adding entry fails due to memory failure */
//  732     status = afStatus_MEM_FAIL;
??AF_DataRequestSrcRtg_2:
        MOV     R1,#0x10
//  733   }
//  734   return status;
??AF_DataRequestSrcRtg_1:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock135
//  735 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function afBuildMSGIncoming
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+0
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function AF_DataRequestSrcRtg
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+0
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function afEndPoints
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond139) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond139) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond139) CFA_SP SP+-5
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140
//  736 
//  737 #endif
//  738 
//  739 /*********************************************************************
//  740  * @fn      afFindEndPointDescList
//  741  *
//  742  * @brief   Find the endpoint description entry from the endpoint
//  743  *          number.
//  744  *
//  745  * @param   EndPoint - Application Endpoint to look for
//  746  *
//  747  * @return  the address to the endpoint/interface description entry
//  748  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  749 static epList_t *afFindEndPointDescList( uint8 EndPoint )
afFindEndPointDescList:
          CFI Block cfiBlock141 Using cfiCommon0
          CFI Function afFindEndPointDescList
        CODE
//  750 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  751   epList_t *epSearch;
//  752 
//  753   for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
        MOV     DPTR,#epList
        SJMP    ??afFindEndPointDescList_0
??afFindEndPointDescList_1:
        MOV     DPL,R2
        MOV     DPH,R3
??afFindEndPointDescList_0:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        JZ      ??afFindEndPointDescList_2
//  754   {
//  755     if (epSearch->epDesc->endPoint == EndPoint)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine6 & 0xFFFF
//  756     {
//  757       break;
//  758     }
//  759   }
??CrossCallReturnLabel_77:
        XRL     A,R1
        JNZ     ??afFindEndPointDescList_1
          CFI EndBlock cfiBlock141
//  760 
//  761   return epSearch;
??afFindEndPointDescList_2:
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  762 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock142 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock142

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond143 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function afFindEndPointDescList
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond144) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond144) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond144) CFA_SP SP+-5
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function afFindSimpleDesc
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+0
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        RET
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond147 Using cfiCommon0
          CFI Function afFindEndPointDescList
          CFI Conditional ??CrossCallReturnLabel_77
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function afEndPoints
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond148) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond148) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond148) CFA_SP SP+-5
          CFI Block cfiPicker149 Using cfiCommon1
          CFI (cfiPicker149) NoFunction
          CFI (cfiPicker149) Picker
        INC     DPTR
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiPicker149
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiCond150 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function afBuildMSGIncoming
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond151) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+0
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function afFindEndPointDescList
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond152) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond152) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond152) CFA_SP SP+-5
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function afEndPoints
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond153) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond153) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond153) CFA_SP SP+-5
          CFI Block cfiPicker154 Using cfiCommon1
          CFI (cfiPicker154) NoFunction
          CFI (cfiPicker154) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiPicker154
//  763 
//  764 /*********************************************************************
//  765  * @fn      afFindEndPointDesc
//  766  *
//  767  * @brief   Find the endpoint description entry from the endpoint
//  768  *          number.
//  769  *
//  770  * @param   EndPoint - Application Endpoint to look for
//  771  *
//  772  * @return  the address to the endpoint/interface description entry
//  773  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  774 endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
afFindEndPointDesc:
          CFI Block cfiBlock155 Using cfiCommon0
          CFI Function afFindEndPointDesc
        CODE
//  775 {
        FUNCALL afFindEndPointDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  776   epList_t *epSearch;
//  777 
//  778   // Look for the endpoint
//  779   epSearch = afFindEndPointDescList( EndPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay
        MOV     DPL,R2
        MOV     DPH,R3
//  780 
//  781   if ( epSearch )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??afFindEndPointDesc_0
//  782     return ( epSearch->epDesc );
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_92:
        SJMP    ??afFindEndPointDesc_1
//  783   else
//  784     return ( (endPointDesc_t *)NULL );
??afFindEndPointDesc_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??afFindEndPointDesc_1:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock155
//  785 }
//  786 
//  787 /*********************************************************************
//  788  * @fn      afFindSimpleDesc
//  789  *
//  790  * @brief   Find the Simple Descriptor from the endpoint number.
//  791  *
//  792  * @param   EP - Application Endpoint to look for.
//  793  *
//  794  * @return  Non-zero to indicate that the descriptor memory must be freed.
//  795  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  796 uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
afFindSimpleDesc:
          CFI Block cfiBlock156 Using cfiCommon0
          CFI Function afFindSimpleDesc
        CODE
//  797 {
        FUNCALL afFindSimpleDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R1
//  798   epList_t *epItem = afFindEndPointDescList( EP );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
//  799   uint8 rtrn = FALSE;
        MOV     R1,#0x0
//  800 
//  801   if ( epItem )
        MOV     A,R4
        ORL     A,R5
        JZ      ??afFindSimpleDesc_0
//  802   {
//  803     if ( epItem->pfnDescCB )
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        JZ      ??afFindSimpleDesc_1
//  804     {
//  805       *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
        ; Setup parameters for indirect call
        MOV     R2,?V0 + 0
        INC     R1
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_80:
        LCALL   ?CALL_IND
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  806       rtrn = TRUE;
        MOV     R1,#0x1
        SJMP    ??afFindSimpleDesc_2
//  807     }
//  808     else
//  809     {
//  810       *ppDesc = epItem->epDesc->simpleDesc;
??afFindSimpleDesc_1:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ??Subroutine33_0 & 0xFFFF
//  811     }
//  812   }
??CrossCallReturnLabel_81:
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??afFindSimpleDesc_3
//  813   else
//  814   {
//  815     *ppDesc = NULL;
??afFindSimpleDesc_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??afFindSimpleDesc_3:
        MOVX    @DPTR,A
//  816   }
//  817 
//  818   return rtrn;
??afFindSimpleDesc_2:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock156
//  819 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond157 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function afIncomingData
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond158) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond158) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond158) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond158) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond158) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+0
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function AF_DataRequest
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+0
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker160 Using cfiCommon1
          CFI (cfiPicker160) NoFunction
          CFI (cfiPicker160) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiPicker160
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiCond161 Using cfiCommon0
          CFI Function afFindSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function afFindSimpleDesc
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+0
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function afIncomingData
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond163) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond163) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond163) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond163) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond163) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond163) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+0
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function afIncomingData
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond164) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond164) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond164) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond164) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond164) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+0
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function AF_DataRequest
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+0
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker166 Using cfiCommon1
          CFI (cfiPicker166) NoFunction
          CFI (cfiPicker166) Picker
        INC     DPTR
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiPicker166
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiCond167 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function afFindSimpleDesc
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+0
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function afFindSimpleDesc
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+0
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function afIncomingData
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond170) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond170) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond170) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond170) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond170) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+0
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function afIncomingData
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond171) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond171) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond171) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond171) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond171) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond171) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond171) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+0
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function AF_DataRequest
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+0
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker173 Using cfiCommon1
          CFI (cfiPicker173) NoFunction
          CFI (cfiPicker173) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiPicker173
//  820 
//  821 /*********************************************************************
//  822  * @fn      afGetDescCB
//  823  *
//  824  * @brief   Get the Descriptor callback function.
//  825  *
//  826  * @param   epDesc - pointer to the endpoint descriptor
//  827  *
//  828  * @return  function pointer or NULL
//  829  */
//  830 static pDescCB afGetDescCB( endPointDesc_t *epDesc )
//  831 {
//  832   epList_t *epSearch;
//  833 
//  834   // Start at the beginning
//  835   epSearch = epList;
//  836 
//  837   // Look through the list until the end
//  838   while ( epSearch )
//  839   {
//  840     // Is there a match?
//  841     if ( epSearch->epDesc == epDesc )
//  842     {
//  843       return ( epSearch->pfnDescCB );
//  844     }
//  845     else
//  846       epSearch = epSearch->nextDesc;  // Next entry
//  847   }
//  848 
//  849   return ( (pDescCB)NULL );
//  850 }
//  851 
//  852 /*********************************************************************
//  853  * @fn      afDataReqMTU
//  854  *
//  855  * @brief   Get the Data Request MTU(Max Transport Unit).
//  856  *
//  857  * @param   fields - afDataReqMTU_t
//  858  *
//  859  * @return  uint8(MTU)
//  860  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  861 uint8 afDataReqMTU( afDataReqMTU_t* fields )
afDataReqMTU:
          CFI Block cfiBlock174 Using cfiCommon0
          CFI Function afDataReqMTU
        CODE
//  862 {
        FUNCALL afDataReqMTU, APSDE_DataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  863   uint8 len;
//  864   uint8 hdr;
//  865 
//  866   if ( fields->kvp == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??afDataReqMTU_0
//  867   {
//  868     hdr = AF_HDR_KVP_MAX_LEN;
        MOV     R6,#0x8
        SJMP    ??afDataReqMTU_1
//  869   }
//  870   else
//  871   {
//  872     hdr = AF_HDR_V1_1_MAX_LEN;
??afDataReqMTU_0:
        MOV     R6,#0x0
//  873   }
//  874 
//  875   len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
//  876 
//  877   return len;
??afDataReqMTU_1:
        ; Setup parameters for call to function APSDE_DataReqMTU
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSDE_DataReqMTU?relay
        MOV     A,R1
        CLR     C
        SUBB    A,R6
        MOV     R1,A
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock174
//  878 }
//  879 
//  880 /*********************************************************************
//  881  * @fn      afGetMatch
//  882  *
//  883  * @brief   Set the allow response flag.
//  884  *
//  885  * @param   ep - Application Endpoint to look for
//  886  * @param   action - true - allow response, false - no response
//  887  *
//  888  * @return  TRUE allow responses, FALSE no response
//  889  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  890 uint8 afGetMatch( uint8 ep )
afGetMatch:
          CFI Block cfiBlock175 Using cfiCommon0
          CFI Function afGetMatch
        CODE
//  891 {
        FUNCALL afGetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  892   epList_t *epSearch;
//  893 
//  894   // Look for the endpoint
//  895   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay
        MOV     DPL,R2
        MOV     DPH,R3
//  896 
//  897   if ( epSearch )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??afGetMatch_0
//  898   {
//  899     if ( epSearch->flags & eEP_AllowMatch )
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??afGetMatch_0
//  900       return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afGetMatch_1
//  901     else
//  902       return ( FALSE );
//  903   }
//  904   else
//  905     return ( FALSE );
??afGetMatch_0:
        MOV     R1,#0x0
          CFI EndBlock cfiBlock175
??afGetMatch_1:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  906 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock176 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock176
//  907 
//  908 /*********************************************************************
//  909  * @fn      afSetMatch
//  910  *
//  911  * @brief   Set the allow response flag.
//  912  *
//  913  * @param   ep - Application Endpoint to look for
//  914  * @param   action - true - allow response, false - no response
//  915  *
//  916  * @return  TRUE if success, FALSE if endpoint not found
//  917  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  918 uint8 afSetMatch( uint8 ep, uint8 action )
afSetMatch:
          CFI Block cfiBlock177 Using cfiCommon0
          CFI Function afSetMatch
        CODE
//  919 {
        FUNCALL afSetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R7,A
//  920   epList_t *epSearch;
//  921 
//  922   // Look for the endpoint
//  923   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay
        MOV     DPL,R2
        MOV     DPH,R3
//  924 
//  925   if ( epSearch )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??afSetMatch_0
//  926   {
//  927     if ( action )
        MOV     A,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JZ      ??afSetMatch_1
//  928     {
//  929       epSearch->flags |= eEP_AllowMatch;
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        SJMP    ??afSetMatch_2
//  930     }
//  931     else
//  932     {
//  933       epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
??afSetMatch_1:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
??afSetMatch_2:
        MOVX    @DPTR,A
//  934     }
//  935     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afSetMatch_3
//  936   }
//  937   else
//  938     return ( FALSE );
??afSetMatch_0:
        MOV     R1,#0x0
??afSetMatch_3:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock177
//  939 }
//  940 
//  941 /*********************************************************************
//  942  * @fn      afNumEndPoints
//  943  *
//  944  * @brief   Returns the number of endpoints defined (including 0)
//  945  *
//  946  * @param   none
//  947  *
//  948  * @return  number of endpoints
//  949  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  950 uint8 afNumEndPoints( void )
afNumEndPoints:
          CFI Block cfiBlock178 Using cfiCommon0
          CFI Function afNumEndPoints
        CODE
//  951 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  952   epList_t *epSearch;
//  953   uint8 endpoints;
//  954 
//  955   // Start at the beginning
//  956   epSearch = epList;
        MOV     DPTR,#epList
        LCALL   ?Subroutine13 & 0xFFFF
//  957   endpoints = 0;
??CrossCallReturnLabel_15:
        MOV     R1,#0x0
        SJMP    ??afNumEndPoints_0
//  958 
//  959   while ( epSearch )
//  960   {
//  961     endpoints++;
??afNumEndPoints_1:
        INC     R1
//  962     epSearch = epSearch->nextDesc;
        LCALL   ??Subroutine37_0 & 0xFFFF
//  963   }
??CrossCallReturnLabel_90:
        MOV     DPL,R2
        MOV     DPH,R3
??afNumEndPoints_0:
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??afNumEndPoints_1
//  964 
//  965   return ( endpoints );
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock178
//  966 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond179 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function afNumEndPoints
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond180) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond180) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond180) CFA_SP SP+-5
          CFI Block cfiPicker181 Using cfiCommon1
          CFI (cfiPicker181) NoFunction
          CFI (cfiPicker181) Picker
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiPicker181

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond182 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function afIncomingData
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond183) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond183) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond183) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond183) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond183) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond183) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+0
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker184 Using cfiCommon1
          CFI (cfiPicker184) NoFunction
          CFI (cfiPicker184) Picker
        INC     DPTR
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiPicker184
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond185 Using cfiCommon0
          CFI Function afFindSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_93
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function afIncomingData
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond186) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond186) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond186) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond186) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond186) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond186) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+0
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function afIncomingData
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond187) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond187) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond187) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond187) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond187) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond187) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+0
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker188 Using cfiCommon1
          CFI (cfiPicker188) NoFunction
          CFI (cfiPicker188) Picker
        INC     DPTR
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiPicker188
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function afFindEndPointDesc
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+0
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function afFindSimpleDesc
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+0
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function afIncomingData
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond192) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond192) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond192) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond192) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond192) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+0
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function afIncomingData
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond193) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond193) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond193) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond193) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond193) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+0
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker194 Using cfiCommon1
          CFI (cfiPicker194) NoFunction
          CFI (cfiPicker194) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiPicker194
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond195 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_85
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function afBuildMSGIncoming
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond196) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond196) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond196) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+0
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function AF_DataRequest
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+0
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function AF_DataRequest
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+0
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function AF_DataRequestSrcRtg
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+0
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function afNumEndPoints
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond200) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond200) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond200) CFA_SP SP+-5
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function AF_DataRequest
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+0
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function afFindEndPointDesc
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+0
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function afFindSimpleDesc
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+0
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function afIncomingData
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond204) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond204) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond204) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond204) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond204) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond204) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond204) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond204) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond204) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+0
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function afIncomingData
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-30)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-29)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-28)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-27)))
          CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond205) V8 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond205) V9 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond205) V10 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond205) V11 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond205) V12 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond205) V13 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond205) V14 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond205) V15 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond205) V16 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond205) V17 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond205) V18 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) V19 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V20 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V21 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+0
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker206 Using cfiCommon1
          CFI (cfiPicker206) NoFunction
          CFI (cfiPicker206) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiPicker206
//  967 
//  968 /*********************************************************************
//  969  * @fn      afEndPoints
//  970  *
//  971  * @brief   Fills in the passed in buffer with the endpoint (numbers).
//  972  *          Use afNumEndPoints to find out how big a buffer to supply.
//  973  *
//  974  * @param   epBuf - pointer to mem used
//  975  *
//  976  * @return  void
//  977  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  978 void afEndPoints( uint8 *epBuf, uint8 skipZDO )
afEndPoints:
          CFI Block cfiBlock207 Using cfiCommon0
          CFI Function afEndPoints
        CODE
//  979 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  980   epList_t *epSearch;
//  981   uint8 endPoint;
//  982 
//  983   // Start at the beginning
//  984   epSearch = epList;
        MOV     DPTR,#epList
        SJMP    ??afEndPoints_0
//  985 
//  986   while ( epSearch )
//  987   {
//  988     endPoint = epSearch->epDesc->endPoint;
??afEndPoints_1:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV     R0,A
//  989 
//  990     if ( !skipZDO || endPoint != 0 )
        MOV     A,R1
        JZ      ??afEndPoints_2
        MOV     A,R0
        JZ      ??afEndPoints_3
//  991       *epBuf++ = endPoint;
??afEndPoints_2:
        MOV     A,R0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  992 
//  993     epSearch = epSearch->nextDesc;
??afEndPoints_3:
        MOV     DPL,R4
        MOV     DPH,R5
//  994   }
??afEndPoints_0:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     A,R4
        ORL     A,R5
        JNZ     ??afEndPoints_1
//  995 }
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock207
//  996 
//  997 /*********************************************************************
//  998  * @fn      afCopyAddress
//  999  *
// 1000  * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
// 1001  *          from the zAddrType_t parameter.
// 1002  *
// 1003  * @param   epBuf - pointer to mem used
// 1004  *
// 1005  * @return  void
// 1006  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1007 void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
afCopyAddress:
          CFI Block cfiBlock208 Using cfiCommon0
          CFI Function afCopyAddress
        CODE
// 1008 {
        FUNCALL afCopyAddress, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1009   afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
        MOV     A,R4
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R5
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine21 & 0xFFFF
// 1010   if ( zAddr->addrMode == Addr64Bit )
??CrossCallReturnLabel_31:
        JNZ     ??afCopyAddress_0
// 1011   {
// 1012     (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??CrossCallReturnLabel_102
// 1013   }
// 1014   else
// 1015   {
// 1016     afAddr->addr.shortAddr = zAddr->addr.shortAddr;
??afCopyAddress_0:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine29_0 & 0xFFFF
// 1017   }
??CrossCallReturnLabel_60:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine38_0 & 0xFFFF
// 1018 
// 1019   // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
// 1020   afAddr->panId = 0;
??CrossCallReturnLabel_102:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1021 }
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock208

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond209 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function afCopyAddress
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+0
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker211 Using cfiCommon1
          CFI (cfiPicker211) NoFunction
          CFI (cfiPicker211) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiPicker211

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond212 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function afCopyAddress
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+0
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker214 Using cfiCommon1
          CFI (cfiPicker214) NoFunction
          CFI (cfiPicker214) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x3
        RET
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiPicker214

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond215 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_103
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function afBuildMSGIncoming
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond216) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+0
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker217 Using cfiCommon1
          CFI (cfiPicker217) NoFunction
          CFI (cfiPicker217) Picker
        MOV     DPL,R2
        MOV     DPH,R3
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiPicker217
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond218 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function afBuildMSGIncoming
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond219) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+0
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function afBuildMSGIncoming
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond220) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond220) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond220) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+0
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function AF_DataRequest
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+0
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function AF_DataRequest
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+0
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function AF_DataRequest
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+0
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function afCopyAddress
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+0
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function afRegisterExtended
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond225) CFA_SP SP+0
          CFI (cfiCond225) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function afBuildMSGIncoming
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-26)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-25)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond226) V8 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond226) V9 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond226) V10 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) V11 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V12 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V13 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V14 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V15 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V16 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V17 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+0
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker227 Using cfiCommon1
          CFI (cfiPicker227) NoFunction
          CFI (cfiPicker227) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiPicker227
// 1022 
// 1023 /**************************************************************************************************
// 1024  * @fn          afAPSF_ConfigGet
// 1025  *
// 1026  * @brief       This function ascertains the fragmentation configuration that corresponds to
// 1027  *              the specified EndPoint.
// 1028  *
// 1029  * input parameters
// 1030  *
// 1031  * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
// 1032  *
// 1033  * output parameters
// 1034  *
// 1035  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1036  *
// 1037  * @return      None.
// 1038  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1039 void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigGet:
          CFI Block cfiBlock228 Using cfiCommon0
          CFI Function afAPSF_ConfigGet
        CODE
// 1040 {
        FUNCALL afAPSF_ConfigGet, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afAPSF_ConfigGet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1041   epList_t *pList = afFindEndPointDescList(endPoint);
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
// 1042 
// 1043   if (pList == NULL)
        MOV     A,R0
        ORL     A,R1
        JNZ     ??afAPSF_ConfigGet_0
// 1044   {
// 1045     pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x32
        MOVX    @DPTR,A
// 1046     pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??afAPSF_ConfigGet_1
// 1047   }
// 1048   else
// 1049   {
// 1050     (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigGet_0:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R0
        ADD     A,#0x6
        MOV     ?V0 + 0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
          CFI EndBlock cfiBlock228
// 1051   }
// 1052 }
??afAPSF_ConfigGet_1:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock229 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock229
// 1053 
// 1054 /**************************************************************************************************
// 1055  * @fn          afAPSF_ConfigSet
// 1056  *
// 1057  * @brief       This function attempts to set the fragmentation configuration that corresponds to
// 1058  *              the specified EndPoint.
// 1059  *
// 1060  * input parameters
// 1061  *
// 1062  * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
// 1063  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1064  *
// 1065  * output parameters
// 1066  *
// 1067  * None.
// 1068  *
// 1069  * @return      afStatus_SUCCESS for success.
// 1070  *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
// 1071  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1072 afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigSet:
          CFI Block cfiBlock230 Using cfiCommon0
          CFI Function afAPSF_ConfigSet
        CODE
// 1073 {
        FUNCALL afAPSF_ConfigSet, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afAPSF_ConfigSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1074   epList_t *pList = afFindEndPointDescList(endPoint);
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay
// 1075 
// 1076   if (pList == NULL)
        MOV     A,R2
        ORL     A,R3
        JNZ     ??afAPSF_ConfigSet_0
// 1077   {
// 1078     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??afAPSF_ConfigSet_1
// 1079   }
// 1080 
// 1081   (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigSet_0:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,R2
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1082   return afStatus_SUCCESS;
        MOV     R1,#0x0
??afAPSF_ConfigSet_1:
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock230
// 1083 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for AF_DataRequestDiscoverRoute>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afRegisterExtended?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegisterExtended

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afRegister?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afDelete?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDelete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afDataConfirm?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afIncomingData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afIncomingData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afBuildMSGIncoming?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afBuildMSGIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AF_DataRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AF_DataRequestSrcRtg?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequestSrcRtg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afFindEndPointDescList?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDescList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afFindEndPointDesc?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afFindSimpleDesc?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindSimpleDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afDataReqMTU?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataReqMTU

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afGetMatch?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afGetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afSetMatch?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afSetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afNumEndPoints?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afNumEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afEndPoints?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afCopyAddress?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afCopyAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afAPSF_ConfigGet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afAPSF_ConfigSet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigSet

        END
// 1084 
// 1085 /**************************************************************************************************
// 1086 */
// 
// 3 027 bytes in segment BANKED_CODE
//   114 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//     2 bytes in segment XDATA_Z
// 
// 3 142 bytes of CODE  memory
//     3 bytes of XDATA memory
//
//Errors: none
//Warnings: none
