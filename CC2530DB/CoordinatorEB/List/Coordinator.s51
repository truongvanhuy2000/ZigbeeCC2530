///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            25/Feb/2023  22:37:31 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\Source\Coordinator.c                          /
//    Command line       =  -f D:\Project\ZStack\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord. /
//                          cfg (-DCPU32MHZ -DROOT=__near_func                /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f D:\Project\ZStack\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg (-DZIGBEEPRO -DSECURE=0                      /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\Project\ZStack\Projects /
//                          \zstack\Samples\GenericApp\Source\Coordinator.c   /
//                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       /
//                          NV_INIT -D COOR -lC D:\Project\ZStack\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\CoordinatorEB\Li /
//                          st\ -lA D:\Project\ZStack\Projects\zstack\Samples /
//                          \GenericApp\CC2530DB\CoordinatorEB\List\          /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\CoordinatorEB\Obj\ -e                /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 24 -I                           /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\ -I D:\Project\ZStack\Projects\zstac /
//                          k\Samples\GenericApp\CC2530DB\..\Source\ -I       /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\hal\includ /
//                          e\ -I D:\Project\ZStack\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\..\..\..\..\..\Components\hal\ /
//                          target\CC2530EB\ -I D:\Project\ZStack\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\mac\include\ -I                         /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\mac\high_l /
//                          evel\ -I D:\Project\ZStack\Projects\zstack\Sample /
//                          s\GenericApp\CC2530DB\..\..\..\..\..\Components\m /
//                          ac\low_level\srf04\ -I D:\Project\ZStack\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\Components\mac\low_level\srf04\single_chip\ -I  /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\mt\ -I     /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\osal\inclu /
//                          de\ -I D:\Project\ZStack\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\..\..\..\..\..\Components\ser /
//                          vices\saddr\ -I D:\Project\ZStack\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\services\sdata\ -I                          /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\stack\af\  /
//                          -I D:\Project\ZStack\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\Components\stack\n /
//                          wk\ -I D:\Project\ZStack\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\..\..\..\..\..\Components\sta /
//                          ck\sapi\ -I D:\Project\ZStack\Projects\zstack\Sam /
//                          ples\GenericApp\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sec\ -I D:\Project\ZStack\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\stack\sys\ -I D:\Project\ZStack\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\zdo\ -I                           /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\zmac\ -I   /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\zmac\f8w\  /
//                          -Ohz                                              /
//    List file          =  D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\CoordinatorEB\List\Coordinator.s51   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Coordinator

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ADD_XSTACK_DISP0_16
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_16
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??CoordProcessMsg?relay
        FUNCTION ??CoordProcessMsg?relay,0203H
        PUBLIC ??CoordProcessUartData?relay
        FUNCTION ??CoordProcessUartData?relay,0203H
        PUBLIC ??coorProcessRecvAddr?relay
        FUNCTION ??coorProcessRecvAddr?relay,0203H
        PUBLIC ??coordProcessType0?relay
        FUNCTION ??coordProcessType0?relay,0203H
        PUBLIC ??coordProcessType1?relay
        FUNCTION ??coordProcessType1?relay,0203H
        PUBLIC ??requestDeviceNwkId?relay
        FUNCTION ??requestDeviceNwkId?relay,0203H
        PUBLIC ??seachDevice?relay
        FUNCTION ??seachDevice?relay,0203H
        PUBLIC CoordProcessMsg
        FUNCTION CoordProcessMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 516, STACK
        PUBLIC CoordProcessUartData
        FUNCTION CoordProcessUartData,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 469, STACK
        PUBLIC coorProcessRecvAddr
        FUNCTION coorProcessRecvAddr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC coordProcessType0
        FUNCTION coordProcessType0,021203H
        ARGFRAME XSTACK, 466, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC coordProcessType1
        FUNCTION coordProcessType1,021203H
        ARGFRAME XSTACK, 468, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC requestDeviceNwkId
        FUNCTION requestDeviceNwkId,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC seachDevice
        FUNCTION seachDevice,021203H
        ARGFRAME XSTACK, 513, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8
          CFI Resource V16:8, V17:8, V18:8, V19:8, V20:8, V21:8, V22:8, V23:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI V16 SameValue
          CFI V17 SameValue
          CFI V18 SameValue
          CFI V19 SameValue
          CFI V20 SameValue
          CFI V21 SameValue
          CFI V22 SameValue
          CFI V23 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI V16 SameValue
          CFI V17 SameValue
          CFI V18 SameValue
          CFI V19 SameValue
          CFI V20 SameValue
          CFI V21 SameValue
          CFI V22 SameValue
          CFI V23 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
GenericApp_SendTheMessage SYMBOL "GenericApp_SendTheMessage"
??GenericApp_SendTheMessage?relay SYMBOL "?relay", GenericApp_SendTheMessage
convertHexToArray   SYMBOL "convertHexToArray"
??convertHexToArray?relay SYMBOL "?relay", convertHexToArray
countValidData      SYMBOL "countValidData"
??countValidData?relay SYMBOL "?relay", countValidData
exceptionHandler    SYMBOL "exceptionHandler"
??exceptionHandler?relay SYMBOL "?relay", exceptionHandler
json_create         SYMBOL "json_create"
??json_create?relay SYMBOL "?relay", json_create
json_getProperty    SYMBOL "json_getProperty"
??json_getProperty?relay SYMBOL "?relay", json_getProperty
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
sAddrExtCmp         SYMBOL "sAddrExtCmp"
??sAddrExtCmp?relay SYMBOL "?relay", sAddrExtCmp
strtol              SYMBOL "strtol"
??strtol?relay      SYMBOL "?relay", strtol
CoordProcessMsg     SYMBOL "CoordProcessMsg"
??CoordProcessMsg?relay SYMBOL "?relay", CoordProcessMsg
CoordProcessUartData SYMBOL "CoordProcessUartData"
??CoordProcessUartData?relay SYMBOL "?relay", CoordProcessUartData
coorProcessRecvAddr SYMBOL "coorProcessRecvAddr"
??coorProcessRecvAddr?relay SYMBOL "?relay", coorProcessRecvAddr
coordProcessType0   SYMBOL "coordProcessType0"
??coordProcessType0?relay SYMBOL "?relay", coordProcessType0
coordProcessType1   SYMBOL "coordProcessType1"
??coordProcessType1?relay SYMBOL "?relay", coordProcessType1
requestDeviceNwkId  SYMBOL "requestDeviceNwkId"
??requestDeviceNwkId?relay SYMBOL "?relay", requestDeviceNwkId
seachDevice         SYMBOL "seachDevice"
??seachDevice?relay SYMBOL "?relay", seachDevice

        EXTERN ??GenericApp_SendTheMessage?relay
        FUNCTION ??GenericApp_SendTheMessage?relay,00H
        EXTERN ??convertHexToArray?relay
        FUNCTION ??convertHexToArray?relay,00H
        EXTERN ??countValidData?relay
        FUNCTION ??countValidData?relay,00H
        EXTERN ??exceptionHandler?relay
        FUNCTION ??exceptionHandler?relay,00H
        EXTERN ??json_create?relay
        FUNCTION ??json_create?relay,00H
        EXTERN ??json_getProperty?relay
        FUNCTION ??json_getProperty?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??sAddrExtCmp?relay
        FUNCTION ??sAddrExtCmp?relay,00H
        EXTERN ??strtol?relay
        FUNCTION ??strtol?relay,00H
        EXTERN GenericApp_NwkState
        EXTERN GenericApp_SendTheMessage
        FUNCTION GenericApp_SendTheMessage,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN convertHexToArray
        FUNCTION convertHexToArray,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN countValidData
        FUNCTION countValidData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 466, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN exceptionHandler
        FUNCTION exceptionHandler,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 513, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN firstDevice
        EXTERN json_create
        FUNCTION json_create,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 515, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN json_getProperty
        FUNCTION json_getProperty,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 513, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 466, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 466, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 516, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strtol
        FUNCTION strtol,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 515, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Project\ZStack\Projects\zstack\Samples\GenericApp\Source\Coordinator.c
//    1 #ifdef COOR
//    2 #include "Coordinator.h"
//    3 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//    4 int CoordProcessMsg(afIncomingMSGPacket_t *pkt)
CoordProcessMsg:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function CoordProcessMsg
        CODE
//    5 {
        FUNCALL CoordProcessMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 516, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 516, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessMsg, json_create
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 515, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 515, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessMsg, exceptionHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 513, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 513, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessMsg, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 513, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 513, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessMsg, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 515, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 515, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessMsg, seachDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 513, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 513, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 501
        MOV     DPL,#0xb
        MOV     DPH,#-0x2
        LCALL   ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 513)
//    6     char backupData[DATA_LENGTH];
//    7     osal_memcpy(backupData, pkt->cmd.Data, DATA_LENGTH);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 516)
        MOV     R4,#0x32
        MOV     R5,#0x0
        MOV     DPL,#-0x3a
        MOV     DPH,#0x1
        LCALL   ?XSTACK_DISP0_16
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 513)
//    8     json_t mem[DATA_LENGTH];
//    9     json_t const *json = json_create(backupData, mem, DATA_LENGTH);
        ; Setup parameters for call to function json_create
        MOV     ?V0 + 0,#0x32
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 515)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,#-0x3b
        MOV     DPH,#0x1
        LCALL   ?XSTACK_DISP0_16
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??json_create?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 513)
//   10     if (!json)
        MOV     A,R2
        ORL     A,R3
        JNZ     ??CoordProcessMsg_0
//   11     {
//   12         exceptionHandler("EndDeviceProcessMsg");
        ; Setup parameters for call to function exceptionHandler
        MOV     R2,#`?<Constant "EndDeviceProcessMsg">` & 0xff
        MOV     R3,#(`?<Constant "EndDeviceProcessMsg">` >> 8) & 0xff
        LCALL   ??exceptionHandler?relay
        SJMP    ??CoordProcessMsg_1
//   13         return 0;
//   14     }
//   15     json_t const *id = json_getProperty(json, "ID");
??CoordProcessMsg_0:
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "ID">` & 0xff
        MOV     R5,#(`?<Constant "ID">` >> 8) & 0xff
        LCALL   ??json_getProperty?relay
//   16     if (!id)
        MOV     A,R2
        ORL     A,R3
        JZ      ??CoordProcessMsg_1
//   17     {
//   18         return 0;
//   19     }
//   20     const uint8 idValue = (uint8)json_getInteger(id);
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 0,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 515)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 513)
        LCALL   ?Subroutine8 & 0xFFFF
//   21 
//   22     if (seachDevice((uint8 *)&idValue, NULL) == NULL)
??CrossCallReturnLabel_11:
        LCALL   ??seachDevice?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??CoordProcessMsg_2
//   23     {
//   24         return 0;
??CoordProcessMsg_1:
        MOV     R2,#0x0
        SJMP    ??CoordProcessMsg_3
//   25     }
//   26     return 1;
??CoordProcessMsg_2:
        MOV     R2,#0x1
??CoordProcessMsg_3:
        MOV     R3,#0x0
        MOV     DPL,#-0xb
        MOV     DPH,#0x1
        LCALL   ?ADD_XSTACK_DISP0_16
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//   27 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//   28 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   29 void coorProcessRecvAddr(afIncomingMSGPacket_t *pkt)
coorProcessRecvAddr:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function coorProcessRecvAddr
        CODE
//   30 {
        FUNCALL coorProcessRecvAddr, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coorProcessRecvAddr, seachDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coorProcessRecvAddr, exceptionHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//   31     uint8 rcvExtAddr[8];
//   32     uint16 rcvShortAddr;
//   33     struct deviceNode *ptr;
//   34     osal_memcpy(rcvExtAddr, pkt->cmd.Data, 8);
        MOV     A,R2
        ADD     A,#0x22
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//   35     rcvShortAddr = (pkt->cmd.Data[9] << 8) | pkt->cmd.Data[8];
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        XCH     A,R2
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   36     ptr = seachDevice(NULL, rcvExtAddr);
        ; Setup parameters for call to function seachDevice
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x0
        LCALL   ??seachDevice?relay
        MOV     DPL,R2
        MOV     DPH,R3
//   37     if (ptr == NULL)
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??coorProcessRecvAddr_0
//   38     {
//   39         exceptionHandler("processRecvAddr");
        ; Setup parameters for call to function exceptionHandler
        MOV     R2,#`?<Constant "processRecvAddr">` & 0xff
        MOV     R3,#(`?<Constant "processRecvAddr">` >> 8) & 0xff
        LCALL   ??exceptionHandler?relay
//   40         return;
        SJMP    ??coorProcessRecvAddr_1
//   41     }
//   42     // HalUARTWrite(SERIAL_APP_PORT, (uint8 *)&rcvShortAddr, 2);
//   43     ptr->device.shortAddr = rcvShortAddr;
??coorProcessRecvAddr_0:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//   44 }
??coorProcessRecvAddr_1:
        MOV     A,#0x8
          CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Valid
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function CoordProcessMsg
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 513)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function coorProcessRecvAddr
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+0
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6
//   45 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   46 void requestDeviceNwkId(uint8 *ieeeAddr, uint8 id)
requestDeviceNwkId:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function requestDeviceNwkId
        CODE
//   47 {
        FUNCALL requestDeviceNwkId, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL requestDeviceNwkId, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL requestDeviceNwkId, exceptionHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        MOV     R6,A
//   48     afStatus_t status;
//   49     afAddrType_t dstAddr;
//   50     uint8 payload[9];
//   51     osal_memcpy(payload, ieeeAddr, 8);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//   52     payload[8] = id;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//   53     dstAddr.addrMode = AddrBroadcast;
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//   54     dstAddr.endPoint = GENERICAPP_ENDPOINT;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//   55     dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   56 
//   57     status = GenericApp_SendTheMessage(&dstAddr, NWK_addr_req, payload, 9);
//   58     if (status != ZSuccess)
        ; Setup parameters for call to function GenericApp_SendTheMessage
        MOV     ?V0 + 0,#0x9
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GenericApp_SendTheMessage?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        JZ      ??requestDeviceNwkId_0
//   59     {
//   60         exceptionHandler("requestDeviceNwkId");
        ; Setup parameters for call to function exceptionHandler
        MOV     R2,#`?<Constant "requestDeviceNwkId">` & 0xff
        MOV     R3,#(`?<Constant "requestDeviceNwkId">` >> 8) & 0xff
        LCALL   ??exceptionHandler?relay
//   61     }
//   62     return;
??requestDeviceNwkId_0:
        MOV     A,#0x15
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock7
//   63 }
//   64 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   65 struct deviceNode *seachDevice(uint8 *id, uint8 *ieeeAddr)
seachDevice:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function seachDevice
        CODE
//   66 {
        FUNCALL seachDevice, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//   67     struct deviceNode *ptr = firstDevice;
        MOV     DPTR,#firstDevice
        LCALL   ?Subroutine5 & 0xFFFF
//   68     if (firstDevice == NULL)
??CrossCallReturnLabel_2:
        MOV     DPTR,#firstDevice
        LCALL   ??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_13:
        JNZ     ??CrossCallReturnLabel_3
        SJMP    ??seachDevice_0
//   69     {
//   70         return NULL;
//   71     }
//   72     while (ptr != NULL)
//   73     {
//   74         if (id != NULL && ieeeAddr == NULL && ptr->device.id == *id)
//   75         {
//   76             return ptr;
//   77         }
//   78         if (id == NULL && ieeeAddr != NULL && osal_ExtAddrEqual(ieeeAddr, ptr->device.extAddr))
//   79         {
//   80             return ptr;
//   81         }
//   82         if (ptr->next == NULL)
//   83         {
//   84             break;
//   85         }
//   86         ptr = ptr->next;
??seachDevice_1:
        MOV     A,?V0 + 0
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??seachDevice_2
        MOV     A,R6
        ORL     A,R7
        JNZ     ??seachDevice_3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??seachDevice_4
??seachDevice_3:
        MOV     A,?V0 + 0
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_15:
        JNZ     ??seachDevice_1
//   87     }
//   88     return NULL;
??seachDevice_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??seachDevice_5:
        LJMP    ?Subroutine0 & 0xFFFF
??seachDevice_2:
        MOV     A,R6
        ORL     A,R7
        JZ      ??seachDevice_3
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??sAddrExtCmp?relay
        MOV     A,R1
        JZ      ??seachDevice_3
??seachDevice_4:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    ??seachDevice_5
          CFI EndBlock cfiBlock8
//   89 }
//   90 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   91 void coordProcessType0(json_t const *json)
coordProcessType0:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function coordProcessType0
        CODE
//   92 {
        FUNCALL coordProcessType0, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coordProcessType0, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coordProcessType0, exceptionHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coordProcessType0, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coordProcessType0, convertHexToArray
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coordProcessType0, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coordProcessType0, convertHexToArray
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coordProcessType0, requestDeviceNwkId
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   93     json_t const *extAddr = json_getProperty(json, "EX");
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "EX">` & 0xff
        MOV     R5,#(`?<Constant "EX">` >> 8) & 0xff
        LCALL   ??json_getProperty?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   94     json_t const *id = json_getProperty(json, "ID");
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "ID">` & 0xff
        MOV     R5,#(`?<Constant "ID">` >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??json_getProperty?relay
//   95 
//   96     if (!id)
        MOV     A,R2
        ORL     A,R3
        JZ      ??coordProcessType0_0
//   97     {
//   98         exceptionHandler("coordProcessType0");
//   99         return;
//  100     }
//  101 
//  102     if (!extAddr)
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??coordProcessType0_1
//  103     {
//  104         exceptionHandler("coordProcessType0");
??coordProcessType0_0:
        ; Setup parameters for call to function exceptionHandler
        MOV     R2,#`?<Constant "coordProcessType0">` & 0xff
        MOV     R3,#(`?<Constant "coordProcessType0">` >> 8) & 0xff
        LCALL   ??exceptionHandler?relay
//  105         return;
        LJMP    ??coordProcessType0_2 & 0xFFFF
//  106     }
//  107 
//  108     const char *extAddrValue = json_getValue(extAddr);
??coordProcessType0_1:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine5 & 0xFFFF
//  109     const uint8 idValue = (uint8)json_getInteger(id);
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 2,#0xa
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 4,R2
//  110     struct deviceNode *ptr = firstDevice;
        MOV     DPTR,#firstDevice
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  111     while (ptr != NULL)
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??coordProcessType0_3
        SJMP    ??coordProcessType0_4
//  112     {
//  113         if (idValue == ptr->device.id)
//  114         {
//  115             ptr->device.id = idValue;
//  116             convertHexToArray(extAddrValue, (char *)ptr->device.extAddr);
//  117             return;
//  118         }
//  119         if (ptr->next == NULL)
//  120         {
//  121             break;
//  122         }
//  123         ptr = ptr->next;
??coordProcessType0_5:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
??coordProcessType0_4:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 4
        JNZ     ??coordProcessType0_6
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        ; Setup parameters for call to function convertHexToArray
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??convertHexToArray?relay
        SJMP    ??coordProcessType0_2
??coordProcessType0_6:
        MOV     A,?V0 + 2
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,?V0 + 3
        LCALL   ?Subroutine3 & 0xFFFF
//  124     }
??CrossCallReturnLabel_16:
        JNZ     ??coordProcessType0_5
//  125     struct deviceNode *device = osal_mem_alloc(sizeof(struct deviceNode));
??coordProcessType0_3:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xd
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R6,?V0 + 6
        MOV     R7,?V0 + 7
//  126     convertHexToArray(extAddrValue, (char *)device->device.extAddr);
        ; Setup parameters for call to function convertHexToArray
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??convertHexToArray?relay
//  127     device->device.id = idValue;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  128     device->next = NULL;
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  129 
//  130     requestDeviceNwkId((uint8 *)device->device.extAddr, idValue);
        ; Setup parameters for call to function requestDeviceNwkId
        MOV     R1,?V0 + 4
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??requestDeviceNwkId?relay
//  131     if (!firstDevice)
        MOV     DPTR,#firstDevice
        LCALL   ??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_14:
        JNZ     ??coordProcessType0_7
//  132     {
//  133         firstDevice = device;
        MOV     DPTR,#firstDevice
        SJMP    ??CrossCallReturnLabel_6
//  134         return;
//  135     }
//  136     ptr->next = device;
??coordProcessType0_7:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
          CFI EndBlock cfiBlock9
//  137     return;
??coordProcessType0_2:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  138 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function coordProcessType0
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function coordProcessType0
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+0
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOV     A,?V0 + 2
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function seachDevice
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function seachDevice
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+0
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function coordProcessType0
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+0
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function seachDevice
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function coordProcessType0
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+0
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        ADDC    A,#0x0
        MOV     DPH,A
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function seachDevice
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function coordProcessType0
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+0
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function seachDevice
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+0
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function coordProcessType0
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+0
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25
//  139 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  140 void coordProcessType1(json_t const *json, char *data, int len)
coordProcessType1:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function coordProcessType1
        CODE
//  141 {
        FUNCALL coordProcessType1, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coordProcessType1, exceptionHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coordProcessType1, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coordProcessType1, seachDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL coordProcessType1, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  142     json_t const *id = json_getProperty(json, "ID");
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "ID">` & 0xff
        MOV     R5,#(`?<Constant "ID">` >> 8) & 0xff
        LCALL   ??json_getProperty?relay
//  143     if (!id)
        MOV     A,R2
        ORL     A,R3
        JNZ     ??coordProcessType1_0
//  144     {
//  145         exceptionHandler("coordProcessType1");
        ; Setup parameters for call to function exceptionHandler
        MOV     R2,#`?<Constant "coordProcessType1">` & 0xff
        MOV     R3,#(`?<Constant "coordProcessType1">` >> 8) & 0xff
        LCALL   ??exceptionHandler?relay
//  146         return;
        SJMP    ??coordProcessType1_1
//  147     }
//  148 
//  149     const uint8 idValue = (uint8)json_getInteger(id);
??coordProcessType1_0:
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 0,#0xa
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        LCALL   ?Subroutine8 & 0xFFFF
//  150     struct deviceNode *ptr = seachDevice((uint8 *)&idValue, NULL);
??CrossCallReturnLabel_12:
        LCALL   ??seachDevice?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  151     if (!ptr)
        MOV     A,R0
        ORL     A,R1
        JZ      ??coordProcessType1_1
//  152     {
//  153         return;
//  154     }
//  155     afAddrType_t deviceAddr;
//  156     deviceAddr.addrMode = Addr16Bit;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  157     deviceAddr.endPoint = GENERICAPP_ENDPOINT;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  158     deviceAddr.addr.shortAddr = ptr->device.shortAddr;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  159     // HalUARTWrite(SERIAL_APP_PORT, (uint8 *)&deviceAddr.addr.shortAddr, 2);
//  160 
//  161     GenericApp_SendTheMessage(&deviceAddr, GENERICAPP_CLUSTERID, data, len);
        ; Setup parameters for call to function GenericApp_SendTheMessage
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GenericApp_SendTheMessage?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
//  162 }
??coordProcessType1_1:
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function CoordProcessMsg
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 513)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function coordProcessType1
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+0
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        ; Setup parameters for call to function seachDevice
        ; Setup parameters for call to function seachDevice
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,DPL
        MOV     R3,DPH
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function CoordProcessMsg
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 515)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function coordProcessType0
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+0
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function coordProcessType1
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+0
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function CoordProcessUartData
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+0
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 468)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34
//  163 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  164 void CoordProcessUartData(char *data)
CoordProcessUartData:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function CoordProcessUartData
        CODE
//  165 {
        FUNCALL CoordProcessUartData, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 466, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 466, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessUartData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 469, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 469, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessUartData, json_create
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 468, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 468, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessUartData, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 466, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 466, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessUartData, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 468, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 468, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessUartData, coordProcessType0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 466, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 466, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessUartData, countValidData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 466, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 466, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessUartData, coordProcessType1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 468, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 468, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordProcessUartData, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 466, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 466, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 450
        MOV     DPL,#0x3e
        MOV     DPH,#-0x2
        LCALL   ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 466)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  166     if (GenericApp_NwkState == DEV_ZB_COORD)
        MOV     DPTR,#GenericApp_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      $+5
        LJMP    ??CoordProcessUartData_0 & 0xFFFF
//  167     {
//  168         char *backupData = osal_mem_alloc(DATA_LENGTH * sizeof(uint8));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x32
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  169         osal_memcpy(backupData, data, DATA_LENGTH);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 469)
        MOV     R4,#0x32
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 466)
//  170         json_t mem[DATA_LENGTH];
//  171         json_t const *json = json_create((char *)data, mem, DATA_LENGTH);
        ; Setup parameters for call to function json_create
        MOV     ?V0 + 2,#0x32
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 468)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??json_create?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 466)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  172         if (!json)
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??CoordProcessUartData_0
//  173         {
//  174             return;
//  175         }
//  176         json_t const *type = json_getProperty(json, "TY");
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "TY">` & 0xff
        MOV     R5,#(`?<Constant "TY">` >> 8) & 0xff
        LCALL   ??json_getProperty?relay
//  177         uint8 typeValue;
//  178         int len;
//  179         if (type)
        MOV     A,R2
        ORL     A,R3
        JZ      ??CoordProcessUartData_1
//  180         {
//  181             typeValue = (uint8)json_getInteger(type);
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 2,#0xa
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 468)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 466)
        MOV     ?V0 + 4,R2
        MOV     R0,?V0 + 4
//  182         }
//  183         switch (typeValue)
??CoordProcessUartData_1:
        MOV     A,R0
        JZ      ??CoordProcessUartData_2
        DEC     A
        JZ      ??CoordProcessUartData_3
        SJMP    ??CoordProcessUartData_0
//  184         {
//  185         case TYPE_DEVICE_INDENTITY:
//  186             coordProcessType0(json);
??CoordProcessUartData_2:
        ; Setup parameters for call to function coordProcessType0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??coordProcessType0?relay
//  187             break;
        SJMP    ??CoordProcessUartData_0
//  188         case TYPE_DEVICE_SETTING:
//  189             len = countValidData(backupData);
//  190             coordProcessType1(json, backupData, len);
??CoordProcessUartData_3:
        ; Setup parameters for call to function coordProcessType1
        ; Setup parameters for call to function countValidData
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??countValidData?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 468)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??coordProcessType1?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 466)
//  191             osal_mem_free(backupData);
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  192             break;
??CoordProcessUartData_0:
        MOV     DPL,#-0x3e
        MOV     DPH,#0x1
        LCALL   ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 16)
//  193         default:
//  194             break;
//  195         }
//  196     }
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock35
//  197 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CoordProcessMsg?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CoordProcessMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??coorProcessRecvAddr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    coorProcessRecvAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??requestDeviceNwkId?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    requestDeviceNwkId

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??seachDevice?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    seachDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??coordProcessType0?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    coordProcessType0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??coordProcessType1?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    coordProcessType1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CoordProcessUartData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CoordProcessUartData

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EndDeviceProcessMsg">`:
        DB "EndDeviceProcessMsg"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ID">`:
        DB "ID"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "processRecvAddr">`:
        DB "processRecvAddr"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "requestDeviceNwkId">`:
        DB "requestDeviceNwkId"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EX">`:
        DB "EX"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "coordProcessType0">`:
        DB "coordProcessType0"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "coordProcessType1">`:
        DB "coordProcessType1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TY">`:
        DB "TY"

        END
//  198 
//  199 #endif
// 
// 1 328 bytes in segment BANKED_CODE
//    42 bytes in segment BANK_RELAYS
//   100 bytes in segment XDATA_ROM_C
// 
// 1 370 bytes of CODE  memory
//   100 bytes of CONST memory
//
//Errors: none
//Warnings: 3
