///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            01/Mar/2023  23:47:58 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\Source\EndDevice.c                            /
//    Command line       =  -f D:\Project\ZStack\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg (-DCPU32MHZ -DROOT=__near_func                /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\Project\ZStack\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\Tool /
//                          s\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0  /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\Project\ZStack\Projects /
//                          \zstack\Samples\GenericApp\Source\EndDevice.c -D  /
//                          NWK_AUTO_POLL -D MT_TASK -D MT_SYS_FUNC -D        /
//                          MT_ZDO_FUNC -D ED -D NV_INIT -lC                  /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\EndDeviceEB\List\ -lA                /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\EndDeviceEB\List\ --diag_suppress    /
//                          Pe001,Pa010 -o D:\Project\ZStack\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\ -e   /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\ -I D:\Project\ZStack\Projects\zstac /
//                          k\Samples\GenericApp\CC2530DB\..\Source\ -I       /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\hal\includ /
//                          e\ -I D:\Project\ZStack\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\..\..\..\..\..\Components\hal\ /
//                          target\CC2530EB\ -I D:\Project\ZStack\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\mac\include\ -I                         /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\mac\high_l /
//                          evel\ -I D:\Project\ZStack\Projects\zstack\Sample /
//                          s\GenericApp\CC2530DB\..\..\..\..\..\Components\m /
//                          ac\low_level\srf04\ -I D:\Project\ZStack\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\Components\mac\low_level\srf04\single_chip\ -I  /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\mt\ -I     /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\osal\inclu /
//                          de\ -I D:\Project\ZStack\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\..\..\..\..\..\Components\ser /
//                          vices\saddr\ -I D:\Project\ZStack\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\services\sdata\ -I                          /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\stack\af\  /
//                          -I D:\Project\ZStack\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\Components\stack\n /
//                          wk\ -I D:\Project\ZStack\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\..\..\..\..\..\Components\sta /
//                          ck\sapi\ -I D:\Project\ZStack\Projects\zstack\Sam /
//                          ples\GenericApp\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sec\ -I D:\Project\ZStack\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\stack\sys\ -I D:\Project\ZStack\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\zdo\ -I                           /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\zmac\ -I   /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\zmac\f8w\  /
//                          -Ohz                                              /
//    List file          =  D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\EndDeviceEB\List\EndDevice.s51       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME EndDevice

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ADD_XSTACK_DISP0_16
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_UL
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??EndDeviceProcessMsg?relay
        FUNCTION ??EndDeviceProcessMsg?relay,0203H
        PUBLIC ??EndDeviceUpdateAddr?relay
        FUNCTION ??EndDeviceUpdateAddr?relay,0203H
        PUBLIC ??changeDimmerValue?relay
        FUNCTION ??changeDimmerValue?relay,0203H
        PUBLIC ??createPWM?relay
        FUNCTION ??createPWM?relay,0203H
        PUBLIC ??endDeviceOperation?relay
        FUNCTION ??endDeviceOperation?relay,0203H
        PUBLIC ??endDeviceProcessAddrRequest?relay
        FUNCTION ??endDeviceProcessAddrRequest?relay,0203H
        PUBLIC ??readAdcValue?relay
        FUNCTION ??readAdcValue?relay,0203H
        PUBLIC EndDeviceProcessMsg
        FUNCTION EndDeviceProcessMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 472, STACK
        PUBLIC EndDeviceUpdateAddr
        FUNCTION EndDeviceUpdateAddr,021201H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBWEAK P1SEL
        PUBWEAK P2DIR
        PUBWEAK PERCFG
        PUBWEAK T1CC0H
        PUBWEAK T1CC0L
        PUBWEAK T1CC1H
        PUBWEAK T1CC1L
        PUBWEAK T1CCTL1
        PUBWEAK T1CTL
        PUBWEAK __Constant_42c80000
        PUBWEAK __Constant_45800000
        PUBLIC changeDimmerValue
        FUNCTION changeDimmerValue,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC createPWM
        FUNCTION createPWM,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC endDeviceOperation
        FUNCTION endDeviceOperation,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC endDeviceProcessAddrRequest
        FUNCTION endDeviceProcessAddrRequest,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC readAdcValue
        FUNCTION readAdcValue,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
GenericApp_SendTheMessage SYMBOL "GenericApp_SendTheMessage"
??GenericApp_SendTheMessage?relay SYMBOL "?relay", GenericApp_SendTheMessage
HalAdcRead          SYMBOL "HalAdcRead"
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
HalUARTWrite        SYMBOL "HalUARTWrite"
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
exceptionHandler    SYMBOL "exceptionHandler"
??exceptionHandler?relay SYMBOL "?relay", exceptionHandler
json_create         SYMBOL "json_create"
??json_create?relay SYMBOL "?relay", json_create
json_getProperty    SYMBOL "json_getProperty"
??json_getProperty?relay SYMBOL "?relay", json_getProperty
osal_revmemcpy      SYMBOL "osal_revmemcpy"
??osal_revmemcpy?relay SYMBOL "?relay", osal_revmemcpy
sAddrExtCmp         SYMBOL "sAddrExtCmp"
??sAddrExtCmp?relay SYMBOL "?relay", sAddrExtCmp
strtol              SYMBOL "strtol"
??strtol?relay      SYMBOL "?relay", strtol
EndDeviceProcessMsg SYMBOL "EndDeviceProcessMsg"
??EndDeviceProcessMsg?relay SYMBOL "?relay", EndDeviceProcessMsg
EndDeviceUpdateAddr SYMBOL "EndDeviceUpdateAddr"
??EndDeviceUpdateAddr?relay SYMBOL "?relay", EndDeviceUpdateAddr
changeDimmerValue   SYMBOL "changeDimmerValue"
??changeDimmerValue?relay SYMBOL "?relay", changeDimmerValue
createPWM           SYMBOL "createPWM"
??createPWM?relay   SYMBOL "?relay", createPWM
endDeviceOperation  SYMBOL "endDeviceOperation"
??endDeviceOperation?relay SYMBOL "?relay", endDeviceOperation
endDeviceProcessAddrRequest SYMBOL "endDeviceProcessAddrRequest"
??endDeviceProcessAddrRequest?relay SYMBOL "?relay", endDeviceProcessAddrRequest
readAdcValue        SYMBOL "readAdcValue"
??readAdcValue?relay SYMBOL "?relay", readAdcValue

        EXTERN ??GenericApp_SendTheMessage?relay
        FUNCTION ??GenericApp_SendTheMessage?relay,00H
        EXTERN ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??exceptionHandler?relay
        FUNCTION ??exceptionHandler?relay,00H
        EXTERN ??json_create?relay
        FUNCTION ??json_create?relay,00H
        EXTERN ??json_getProperty?relay
        FUNCTION ??json_getProperty?relay,00H
        EXTERN ??osal_revmemcpy?relay
        FUNCTION ??osal_revmemcpy?relay,00H
        EXTERN ??sAddrExtCmp?relay
        FUNCTION ??sAddrExtCmp?relay,00H
        EXTERN ??strtol?relay
        FUNCTION ??strtol?relay,00H
        EXTERN GenericApp_CoorAddr
        EXTERN GenericApp_SendTheMessage
        FUNCTION GenericApp_SendTheMessage,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN appData
        EXTERN exceptionHandler
        FUNCTION exceptionHandler,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN json_create
        FUNCTION json_create,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN json_getProperty
        FUNCTION json_getProperty,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_revmemcpy
        FUNCTION osal_revmemcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strtol
        FUNCTION strtol,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Project\ZStack\Projects\zstack\Samples\GenericApp\Source\EndDevice.c
//    1 #ifdef ED
//    2 
//    3 #define HAL_ADC_REF_125V 0x00 /* Internal 1.25V Reference */
//    4 #define HAL_ADC_DEC_064 0x00  /* Decimate by 64 : 8-bit resolution */
//    5 #define HAL_ADC_DEC_128 0x10  /* Decimate by 128 : 10-bit resolution */
//    6 #define HAL_ADC_DEC_512 0x30  /* Decimate by 512 : 14-bit resolution */
//    7 #define HAL_ADC_CHN_VDD3 0x0f /* Input channel: VDD/3 */
//    8 #define HAL_ADC_CHN_TEMP 0x0e /* Temperature sensor */
//    9 #define HAL_ADC_EOC 0x80      /* End of Conversion bit */
//   10 
//   11 #include "EndDevice.h"

        ASEGN SFR_AN:DATA:NOROOT,0daH
// unsigned char volatile __sfr T1CC0L
T1CC0L:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0dbH
// unsigned char volatile __sfr T1CC0H
T1CC0H:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0dcH
// unsigned char volatile __sfr T1CC1L
T1CC1L:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ddH
// unsigned char volatile __sfr T1CC1H
T1CC1H:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e4H
// unsigned char volatile __sfr T1CTL
T1CTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e6H
// unsigned char volatile __sfr T1CCTL1
T1CCTL1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   12 #include "ioCC2530.h"
//   13 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   14 int endDeviceProcessAddrRequest(afIncomingMSGPacket_t *pkt)
endDeviceProcessAddrRequest:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function endDeviceProcessAddrRequest
        CODE
//   15 {
        FUNCALL endDeviceProcessAddrRequest, osal_revmemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL endDeviceProcessAddrRequest, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL endDeviceProcessAddrRequest, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL endDeviceProcessAddrRequest, exceptionHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//   16     uint8 rcvExtAddr[8];
//   17     uint8 id;
//   18     osal_revmemcpy(rcvExtAddr, pkt->cmd.Data, 8);
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function osal_revmemcpy
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_revmemcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//   19     id = pkt->cmd.Data[8];
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
//   20     if (!osal_ExtAddrEqual(rcvExtAddr, NLME_GetExtAddr()))
        ; Setup parameters for call to function sAddrExtCmp
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCmp?relay
        MOV     A,R1
        JNZ     ??endDeviceProcessAddrRequest_0
//   21     {
//   22         exceptionHandler("endDeviceProcessAddrRequest");
        ; Setup parameters for call to function exceptionHandler
        MOV     R2,#`?<Constant "endDeviceProcessAddrR...">` & 0xff
        MOV     R3,#(`?<Constant "endDeviceProcessAddrR...">` >> 8) & 0xff
        LCALL   ??exceptionHandler?relay
//   23         return 0;
        MOV     R2,#0x0
        SJMP    ??endDeviceProcessAddrRequest_1
//   24     }
//   25     appData.id = id;
??endDeviceProcessAddrRequest_0:
        MOV     A,R6
        MOV     DPTR,#appData
        MOVX    @DPTR,A
//   26     return 1;
        MOV     R2,#0x1
??endDeviceProcessAddrRequest_1:
        MOV     R3,#0x0
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//   27 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   28 void EndDeviceUpdateAddr()
EndDeviceUpdateAddr:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function EndDeviceUpdateAddr
        CODE
//   29 {
        FUNCALL EndDeviceUpdateAddr, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EndDeviceUpdateAddr, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EndDeviceUpdateAddr, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//   30     byte *extAddr;
//   31     uint8 payload[10];
//   32     uint16 nwkAddr;
//   33     extAddr = NLME_GetExtAddr();
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//   34     nwkAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   35     for (int i = 0; i < 8; i++)
        MOV     R2,#0x0
        MOV     R3,#0x0
//   36     {
//   37         payload[7 - i] = *(extAddr + i);
??EndDeviceUpdateAddr_0:
        MOV     A,R6
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        CLR     C
        CLR     A
        SUBB    A,R2
        MOV     R4,A
        CLR     A
        SUBB    A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R4
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R5
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//   38     }
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x8
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??EndDeviceUpdateAddr_0
//   39     payload[8] = nwkAddr & 0xFF;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//   40     payload[9] = nwkAddr >> 8;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//   41     GenericApp_SendTheMessage(&GenericApp_CoorAddr, NWK_addr_rsp, payload, 10);
        ; Setup parameters for call to function GenericApp_SendTheMessage
        MOV     ?V0 + 0,#0xa
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x0
        MOV     R5,#-0x80
        MOV     R2,#GenericApp_CoorAddr & 0xff
        MOV     R3,#(GenericApp_CoorAddr >> 8) & 0xff
        LCALL   ??GenericApp_SendTheMessage?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//   42 }
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//   43 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   44 int EndDeviceProcessMsg(afIncomingMSGPacket_t *pkt)
EndDeviceProcessMsg:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function EndDeviceProcessMsg
        CODE
//   45 {
        FUNCALL EndDeviceProcessMsg, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 470, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EndDeviceProcessMsg, json_create
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 472, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EndDeviceProcessMsg, exceptionHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 470, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EndDeviceProcessMsg, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 470, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EndDeviceProcessMsg, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 470, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EndDeviceProcessMsg, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 470, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EndDeviceProcessMsg, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 470, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EndDeviceProcessMsg, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 472, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EndDeviceProcessMsg, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 472, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EndDeviceProcessMsg, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 472, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL EndDeviceProcessMsg, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 472, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 450
        MOV     DPL,#0x3e
        MOV     DPH,#-0x2
        LCALL   ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 470)
//   46     HalUARTWrite(SERIAL_APP_PORT, pkt->cmd.Data, pkt->cmd.DataLength);
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R2
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine3_0 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//   47     json_t mem[DATA_LENGTH];
//   48     json_t const *json = json_create((char *)pkt->cmd.Data, mem, DATA_LENGTH);
        ; Setup parameters for call to function json_create
        MOV     ?V0 + 0,#0x32
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 472)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine3_0 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ??json_create?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 470)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//   49     if (!json)
        MOV     A,R6
        ORL     A,R7
        JNZ     ??EndDeviceProcessMsg_0
//   50     {
//   51         exceptionHandler("EndDeviceProcessMsg");
        ; Setup parameters for call to function exceptionHandler
        MOV     R2,#`?<Constant "EndDeviceProcessMsg">` & 0xff
        MOV     R3,#(`?<Constant "EndDeviceProcessMsg">` >> 8) & 0xff
        LCALL   ??exceptionHandler?relay
//   52         return 0;
        MOV     R2,#0x0
        LJMP    ??EndDeviceProcessMsg_1 & 0xFFFF
//   53     }
//   54     json_t const *id = json_getProperty(json, "ID");
??EndDeviceProcessMsg_0:
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "ID">` & 0xff
        MOV     R5,#(`?<Constant "ID">` >> 8) & 0xff
        LCALL   ??json_getProperty?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
//   55     json_t const *status = json_getProperty(json, "ON");
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "ON">` & 0xff
        MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??json_getProperty?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//   56     json_t const *dim = json_getProperty(json, "DI");
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "DI">` & 0xff
        MOV     R5,#(`?<Constant "DI">` >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??json_getProperty?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   57     json_t const *time = json_getProperty(json, "TI");
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "TI">` & 0xff
        MOV     R5,#(`?<Constant "TI">` >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??json_getProperty?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R6,?V0 + 6
        MOV     R7,?V0 + 7
//   58     if (status)
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??EndDeviceProcessMsg_2
//   59         appData.lightStatus = (uint8)json_getInteger(status);
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 6,#0xa
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 472)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 470)
        MOV     A,R2
        MOV     DPTR,#appData + 1
        MOVX    @DPTR,A
//   60     if (id)
??EndDeviceProcessMsg_2:
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??EndDeviceProcessMsg_3
//   61         appData.id = (uint8)json_getInteger(id);
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 2,#0xa
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 472)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 470)
        MOV     A,R2
        MOV     DPTR,#appData
        MOVX    @DPTR,A
//   62     if (dim)
??EndDeviceProcessMsg_3:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??EndDeviceProcessMsg_4
//   63         appData.dimmer = json_getInteger(dim);
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 2,#0xa
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 472)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 470)
        MOV     A,R2
        MOV     DPTR,#appData + 2
        MOVX    @DPTR,A
//   64     if (time)
??EndDeviceProcessMsg_4:
        MOV     A,R6
        ORL     A,R7
        JZ      ??EndDeviceProcessMsg_5
//   65         appData.time = json_getInteger(time);
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 0,#0xa
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 472)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 470)
        MOV     A,R2
        MOV     DPTR,#appData + 3
        MOVX    @DPTR,A
//   66     return 1;
??EndDeviceProcessMsg_5:
        MOV     R2,#0x1
??EndDeviceProcessMsg_1:
        MOV     R3,#0x0
        MOV     DPL,#-0x3e
        MOV     DPH,#0x1
        LCALL   ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//   67 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function endDeviceProcessAddrRequest
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function EndDeviceProcessMsg
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+0
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 470)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV     A,R2
        ADD     A,#0x22
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function EndDeviceProcessMsg
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function EndDeviceProcessMsg
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+0
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function EndDeviceProcessMsg
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+0
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function EndDeviceProcessMsg
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+0
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine3_0:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function EndDeviceProcessMsg
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 470)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function EndDeviceProcessMsg
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+0
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function EndDeviceProcessMsg
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+0
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function EndDeviceProcessMsg
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+0
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function EndDeviceProcessMsg
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+0
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function EndDeviceProcessMsg
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+0
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   68 void endDeviceOperation(GenericAppData *data)
endDeviceOperation:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function endDeviceOperation
        CODE
//   69 {
        FUNCALL endDeviceOperation, readAdcValue
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   70     readAdcValue(data);
        ; Setup parameters for call to function readAdcValue
        LCALL   ??readAdcValue?relay
          CFI EndBlock cfiBlock18
//   71 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock19

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   72 void changeDimmerValue(GenericAppData *data)
changeDimmerValue:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function changeDimmerValue
        CODE
//   73 {
        FUNCALL changeDimmerValue, createPWM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL changeDimmerValue, createPWM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   74     if (data->dimmer != 0 && data->lightStatus == 1)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??changeDimmerValue_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??changeDimmerValue_0
//   75     {
//   76         createPWM(data->dimmer);
        ; Setup parameters for call to function createPWM
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??changeDimmerValue_1
//   77     }
//   78     else
//   79         createPWM(0);
??changeDimmerValue_0:
        ; Setup parameters for call to function createPWM
        MOV     R1,#0x0
??changeDimmerValue_1:
        LCALL   ??createPWM?relay
//   80 }
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   81 void readAdcValue(GenericAppData *data)
readAdcValue:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function readAdcValue
        CODE
//   82 {
        FUNCALL readAdcValue, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   83     data->adcValue = HalAdcRead(HAL_ADC_CHN_AIN0, HAL_ADC_RESOLUTION_12);
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x3
        MOV     R1,#0x0
        LCALL   ??HalAdcRead?relay
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//   84 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock21

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   85 void createPWM(uint8 dutyCycle)
createPWM:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function createPWM
        CODE
//   86 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
//   87     uint32 dutyValue = 4096;
//   88     if(dutyCycle >= 100)
        CLR     C
        SUBB    A,#0x64
        JC      ??createPWM_0
//   89     {
//   90       dutyCycle = 99;
        MOV     R2,#0x63
        SJMP    ??createPWM_1
//   91     }
//   92     if(dutyCycle == 0)
??createPWM_0:
        MOV     A,R2
        JNZ     ??createPWM_1
//   93     {
//   94       dutyCycle = 100;
        MOV     R2,#0x64
//   95     }
//   96     float percent = (float)dutyCycle / 100;
//   97     dutyValue = dutyValue * percent;
??createPWM_1:
        MOV     ?V0 + 0,R2
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#__Constant_45800000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_UL
//   98     uint8 dutyHighBit = (dutyValue >> 8) & 0xFF;
//   99     uint8 dutyLowBit = (dutyValue)&0xFF;
//  100 
//  101     PERCFG |= BV(6);                // Select Timer 1 Alternative 2 location
        ORL     0xf1,#0x40
//  102     P2DIR = (P2DIR & ~0xC0) | 0x80; // Give priority to Timer 1
        MOV     A,0xff
        ANL     A,#0x3f
        ORL     A,#0x80
        MOV     0xff,A
//  103     P1SEL |= BV(1);                 // Set P1_1 to peripheral
        ORL     0xf4,#0x2
//  104 
//  105     T1CC0L = 0x00; // PWM signal period
        MOV     0xda,#0x0
//  106     T1CC0H = 0x10;
        MOV     0xdb,#0x10
//  107 
//  108     T1CC1L = dutyLowBit; // PWM duty cycle
        MOV     A,?V0 + 0
        MOV     0xdc,A
//  109     T1CC1H = dutyHighBit;
        MOV     A,?V0 + 1
        MOV     0xdd,A
//  110 
//  111     T1CCTL1 = 0x1c;
        MOV     0xe6,#0x1c
//  112 
//  113     T1CTL |= (BV(2) | 0x03);
        ORL     0xe4,#0x7
//  114 }
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock22
        REQUIRE PERCFG
        REQUIRE P2DIR
        REQUIRE P1SEL
        REQUIRE T1CC0L
        REQUIRE T1CC0H
        REQUIRE T1CC1L
        REQUIRE T1CC1H
        REQUIRE T1CCTL1
        REQUIRE T1CTL

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??endDeviceProcessAddrRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    endDeviceProcessAddrRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??EndDeviceUpdateAddr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    EndDeviceUpdateAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??EndDeviceProcessMsg?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    EndDeviceProcessMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??endDeviceOperation?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    endDeviceOperation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??changeDimmerValue?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    changeDimmerValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??readAdcValue?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    readAdcValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??createPWM?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    createPWM

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "endDeviceProcessAddrR...">`:
        DB "endDeviceProcessAddrRequest"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EndDeviceProcessMsg">`:
        DB "EndDeviceProcessMsg"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ID">`:
        DB "ID"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ON">`:
        DB "ON"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "DI">`:
        DB "DI"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TI">`:
        DB "TI"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42c80000:
        DD 42C80000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_45800000:
        DD 45800000H

        END
//  115 #endif
// 
// 862 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//   9 bytes in segment SFR_AN
//  68 bytes in segment XDATA_ROM_C
// 
// 904 bytes of CODE  memory
//  60 bytes of CONST memory (+ 8 bytes shared)
//   0 bytes of DATA  memory (+ 9 bytes shared)
//
//Errors: none
//Warnings: 1
