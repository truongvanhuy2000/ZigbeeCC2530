///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            01/Mar/2023  23:48:19 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\Source\tiny-json.c                            /
//    Command line       =  -f D:\Project\ZStack\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg (-DCPU32MHZ -DROOT=__near_func                /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\Project\ZStack\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\Tool /
//                          s\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0  /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\Project\ZStack\Projects /
//                          \zstack\Samples\GenericApp\Source\tiny-json.c -D  /
//                          NWK_AUTO_POLL -D MT_TASK -D MT_SYS_FUNC -D        /
//                          MT_ZDO_FUNC -D ED -D NV_INIT -lC                  /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\EndDeviceEB\List\ -lA                /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\EndDeviceEB\List\ --diag_suppress    /
//                          Pe001,Pa010 -o D:\Project\ZStack\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\ -e   /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\ -I D:\Project\ZStack\Projects\zstac /
//                          k\Samples\GenericApp\CC2530DB\..\Source\ -I       /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\hal\includ /
//                          e\ -I D:\Project\ZStack\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\..\..\..\..\..\Components\hal\ /
//                          target\CC2530EB\ -I D:\Project\ZStack\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\mac\include\ -I                         /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\mac\high_l /
//                          evel\ -I D:\Project\ZStack\Projects\zstack\Sample /
//                          s\GenericApp\CC2530DB\..\..\..\..\..\Components\m /
//                          ac\low_level\srf04\ -I D:\Project\ZStack\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\Components\mac\low_level\srf04\single_chip\ -I  /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\mt\ -I     /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\osal\inclu /
//                          de\ -I D:\Project\ZStack\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\..\..\..\..\..\Components\ser /
//                          vices\saddr\ -I D:\Project\ZStack\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\services\sdata\ -I                          /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\stack\af\  /
//                          -I D:\Project\ZStack\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\Components\stack\n /
//                          wk\ -I D:\Project\ZStack\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\..\..\..\..\..\Components\sta /
//                          ck\sapi\ -I D:\Project\ZStack\Projects\zstack\Sam /
//                          ples\GenericApp\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sec\ -I D:\Project\ZStack\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\stack\sys\ -I D:\Project\ZStack\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\zdo\ -I                           /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\zmac\ -I   /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\zmac\f8w\  /
//                          -Ohz                                              /
//    List file          =  D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\EndDeviceEB\List\tiny-json.s51       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `tiny-json`

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        FUNCTION ??goBlank?relay,0203H
        FUNCTION ??goNum?relay,0203H
        FUNCTION ??isEndOfPrimitive?relay,0203H
        FUNCTION ??isOneOfThem?relay,0203H
        PUBLIC ??json_create?relay
        FUNCTION ??json_create?relay,0203H
        PUBLIC ??json_createWithPool?relay
        FUNCTION ??json_createWithPool?relay,0203H
        PUBLIC ??json_getProperty?relay
        FUNCTION ??json_getProperty?relay,0203H
        PUBLIC ??json_getPropertyValue?relay
        FUNCTION ??json_getPropertyValue?relay,0203H
        FUNCTION ??numValue?relay,0203H
        FUNCTION ??objValue?relay,0203H
        FUNCTION ??parseString?relay,0203H
        FUNCTION ??poolAlloc?relay,0203H
        FUNCTION ??poolInit?relay,0203H
        FUNCTION ??primitiveValue?relay,0203H
        FUNCTION ??setToNull?relay,0203H
        FUNCTION goBlank,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION goNum,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION isEndOfPrimitive,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION isOneOfThem,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC json_create
        FUNCTION json_create,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC json_createWithPool
        FUNCTION json_createWithPool,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC json_getProperty
        FUNCTION json_getProperty,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC json_getPropertyValue
        FUNCTION json_getPropertyValue,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION numValue,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION objValue,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION parseString,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION poolAlloc,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION poolInit,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION primitiveValue,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION setToNull,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
strcmp              SYMBOL "strcmp"
??strcmp?relay      SYMBOL "?relay", strcmp
json_create         SYMBOL "json_create"
??json_create?relay SYMBOL "?relay", json_create
json_createWithPool SYMBOL "json_createWithPool"
??json_createWithPool?relay SYMBOL "?relay", json_createWithPool
json_getProperty    SYMBOL "json_getProperty"
??json_getProperty?relay SYMBOL "?relay", json_getProperty
json_getPropertyValue SYMBOL "json_getPropertyValue"
??json_getPropertyValue?relay SYMBOL "?relay", json_getPropertyValue

        EXTERN ??strcmp?relay
        FUNCTION ??strcmp?relay,00H
        EXTERN _Small_Ctype
        EXTERN strcmp
        FUNCTION strcmp,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Project\ZStack\Projects\zstack\Samples\GenericApp\Source\tiny-json.c
//    1 
//    2 /*
//    3 
//    4 <https://github.com/rafagafe/tiny-json>
//    5 
//    6   Licensed under the MIT License <http://opensource.org/licenses/MIT>.
//    7   SPDX-License-Identifier: MIT
//    8   Copyright (c) 2016-2018 Rafa Garcia <rafagarcia77@gmail.com>.
//    9 
//   10   Permission is hereby  granted, free of charge, to any  person obtaining a copy
//   11   of this software and associated  documentation files (the "Software"), to deal
//   12   in the Software  without restriction, including without  limitation the rights
//   13   to  use, copy,  modify, merge,  publish, distribute,  sublicense, and/or  sell
//   14   copies  of  the Software,  and  to  permit persons  to  whom  the Software  is
//   15   furnished to do so, subject to the following conditions:
//   16 
//   17   The above copyright notice and this permission notice shall be included in all
//   18   copies or substantial portions of the Software.
//   19 
//   20   THE SOFTWARE  IS PROVIDED "AS  IS", WITHOUT WARRANTY  OF ANY KIND,  EXPRESS OR
//   21   IMPLIED,  INCLUDING BUT  NOT  LIMITED TO  THE  WARRANTIES OF  MERCHANTABILITY,
//   22   FITNESS FOR  A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT  SHALL THE
//   23   AUTHORS  OR COPYRIGHT  HOLDERS  BE  LIABLE FOR  ANY  CLAIM,  DAMAGES OR  OTHER
//   24   LIABILITY, WHETHER IN AN ACTION OF  CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//   25   OUT OF OR IN CONNECTION WITH THE SOFTWARE  OR THE USE OR OTHER DEALINGS IN THE
//   26   SOFTWARE.
//   27 
//   28 */
//   29 
//   30 #include <string.h>
//   31 #include <ctype.h>
//   32 #include "tiny-json.h"
//   33 
//   34 /** Structure to handle a heap of JSON properties. */
//   35 typedef struct jsonStaticPool_s {
//   36     json_t* mem;      /**< Pointer to array of json properties.      */
//   37     unsigned int qty; /**< Length of the array of json properties.   */
//   38     unsigned int nextFree;  /**< The index of the next free json property. */
//   39     jsonPool_t pool;
//   40 } jsonStaticPool_t;
//   41 
//   42 /* Search a property by its name in a JSON object. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   43 json_t const* json_getProperty( json_t const* obj, char const* property ) {
json_getProperty:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function json_getProperty
        CODE
        FUNCALL json_getProperty, strcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//   44     json_t const* sibling;
//   45     for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        SJMP    ??json_getProperty_0
??json_getProperty_1:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
??json_getProperty_0:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??json_getProperty_2
//   46         if ( sibling->name && !strcmp( sibling->name, property ) )
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_16:
        JZ      ??json_getProperty_1
        ; Setup parameters for call to function strcmp
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??strcmp?relay
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JNZ     ??json_getProperty_1
//   47             return sibling;
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    ??json_getProperty_3
//   48     return 0;
??json_getProperty_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
          CFI EndBlock cfiBlock0
??json_getProperty_3:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//   49 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function json_getProperty
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function objValue
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+0
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function objValue
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function json_getProperty
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+0
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function objValue
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+0
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
//   50 
//   51 /* Search a property by its name in a JSON object and return its value. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   52 char const* json_getPropertyValue( json_t const* obj, char const* property ) {
json_getPropertyValue:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function json_getPropertyValue
        CODE
        FUNCALL json_getPropertyValue, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   53 	json_t const* field = json_getProperty( obj, property );
        ; Setup parameters for call to function json_getProperty
        LCALL   ??json_getProperty?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//   54 	if ( !field ) return 0;
        MOV     A,R0
        ORL     A,R1
        JZ      ??json_getPropertyValue_0
//   55         jsonType_t type = json_getType( field );
//   56         if ( JSON_ARRAY >= type ) return 0;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x2
        JNC     ??json_getPropertyValue_1
??json_getPropertyValue_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??json_getPropertyValue_2
//   57 	return json_getValue( field );
??json_getPropertyValue_1:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
??json_getPropertyValue_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//   58 }
//   59 
//   60 /* Internal prototypes: */
//   61 static char* goBlank( char* str );
//   62 static char* goNum( char* str );
//   63 static json_t* poolInit( jsonPool_t* pool );
//   64 static json_t* poolAlloc( jsonPool_t* pool );
//   65 static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
//   66 static char* setToNull( char* ch );
//   67 static bool isEndOfPrimitive( char ch );
//   68 
//   69 /* Parse a string to get a json. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   70 json_t const* json_createWithPool( char *str, jsonPool_t *pool ) {
json_createWithPool:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function json_createWithPool
        CODE
        FUNCALL json_createWithPool, goBlank
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL json_createWithPool, objValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//   71     char* ptr = goBlank( str );
        ; Setup parameters for call to function goBlank
        LCALL   ??goBlank?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   72     if ( !ptr || (*ptr != '{' && *ptr != '[') ) return 0;
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??json_createWithPool_0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x7b
        JZ      ??json_createWithPool_1
        MOVX    A,@DPTR
        XRL     A,#0x5b
        JNZ     ??json_createWithPool_0
//   73     json_t* obj = pool->init( pool );
??json_createWithPool_1:
        ; Setup parameters for indirect call
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?CALL_IND
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//   74     obj->name    = 0;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine14 & 0xFFFF
//   75     obj->sibling = 0;
??CrossCallReturnLabel_21:
        LCALL   ?Subroutine10 & 0xFFFF
//   76     obj->u.c.child = 0;
??CrossCallReturnLabel_18:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   77     ptr = objValue( ptr, obj, pool );
//   78     if ( !ptr ) return 0;
        ; Setup parameters for call to function objValue
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??objValue?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??json_createWithPool_2
??json_createWithPool_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??json_createWithPool_3
//   79     return obj;
??json_createWithPool_2:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
          CFI EndBlock cfiBlock10
??json_createWithPool_3:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//   80 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function json_createWithPool
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function objValue
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+0
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOVX    @DPTR,A
        INC     DPTR
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function objValue
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function json_createWithPool
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+0
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function objValue
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+0
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_22:
        INC     DPTR
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function json_createWithPool
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function objValue
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+0
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        MOV     DPL,R2
        MOV     DPH,R3
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function objValue
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function json_createWithPool
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+0
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function objValue
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+0
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25
//   81 
//   82 /* Parse a string to get a json. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   83 json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
json_create:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function json_create
        CODE
        FUNCALL json_create, json_createWithPool
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
//   84     jsonStaticPool_t spool;
//   85     spool.mem = mem;
??CrossCallReturnLabel_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//   86     spool.qty = qty;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   87     spool.pool.init = poolInit;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??poolInit?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??poolInit?relay >> 8) & 0xff
        MOVX    @DPTR,A
//   88     spool.pool.alloc = poolAlloc;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??poolAlloc?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??poolAlloc?relay >> 8) & 0xff
        MOVX    @DPTR,A
//   89     return json_createWithPool( str, &spool.pool );
        ; Setup parameters for call to function json_createWithPool
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??json_createWithPool?relay
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock26
//   90 }
//   91 
//   92 /** Get a special character with its escape character. Examples:
//   93   * 'b' -> '\\b', 'n' -> '\\n', 't' -> '\\t'
//   94   * @param ch The escape character.
//   95   * @retval  The character code. */
//   96 static char getEscape( char ch ) {

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   97     static struct { char ch; char code; } const pair[] = {
??pair:
        DB 34
        DB 34
        DB 92
        DB 92
        DB 47
        DB 47
        DB 98
        DB 8
        DB 102
        DB 12
        DB 110
        DB 10
        DB 114
        DB 13
        DB 116
        DB 9
//   98         { '\"', '\"' }, { '\\', '\\' },
//   99         { '/',  '/'  }, { 'b',  '\b' },
//  100         { 'f',  '\f' }, { 'n',  '\n' },
//  101         { 'r',  '\r' }, { 't',  '\t' },
//  102     };
//  103     unsigned int i;
//  104     for( i = 0; i < sizeof pair / sizeof *pair; ++i )
//  105         if ( pair[i].ch == ch )
//  106             return pair[i].code;
//  107     return '\0';
//  108 }
//  109 
//  110 /** Parse 4 characters.
//  111   * @param str Pointer to  first digit.
//  112   * @retval '?' If the four characters are hexadecimal digits.
//  113   * @retval '\0' In other cases. */
//  114 static unsigned char getCharFromUnicode( unsigned char const* str ) {
//  115     unsigned int i;
//  116     for( i = 0; i < 4; ++i )
//  117         if ( !isxdigit( str[i] ) )
//  118             return '\0';
//  119     return '?';
//  120 }
//  121 
//  122 /** Parse a string and replace the scape characters by their meaning characters.
//  123   * This parser stops when finds the character '\"'. Then replaces '\"' by '\0'.
//  124   * @param str Pointer to first character.
//  125   * @retval Pointer to first non white space after the string. If success.
//  126   * @retval Null pointer if any error occur. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  127 static char* parseString( char* str ) {
parseString:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function parseString
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  128     unsigned char* head = (unsigned char*)str;
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
//  129     unsigned char* tail = (unsigned char*)str;
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        SJMP    ??parseString_0
//  130     for( ; *head; ++head, ++tail ) {
//  131         if ( *head == '\"' ) {
//  132             *tail = '\0';
//  133             return (char*)++head;
//  134         }
//  135         if ( *head == '\\' ) {
//  136             if ( *++head == 'u' ) {
//  137                 char const ch = getCharFromUnicode( ++head );
//  138                 if ( ch == '\0' ) return 0;
//  139                 *tail = ch;
//  140                 head += 3;
//  141             }
//  142             else {
//  143                 char const esc = getEscape( *head );
//  144                 if ( esc == '\0' ) return 0;
//  145                 *tail = esc;
//  146             }
//  147         }
//  148         else *tail = *head;
??parseString_1:
        MOVX    A,@DPTR
??parseString_2:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
??parseString_3:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
??parseString_0:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??parseString_4 & 0xFFFF
        XRL     A,#0x22
        JNZ     ??parseString_5
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LJMP    ??parseString_6 & 0xFFFF
??parseString_5:
        MOVX    A,@DPTR
        XRL     A,#0x5c
        JNZ     ??parseString_1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOVX    A,@DPTR
        XRL     A,#0x75
        JNZ     ??parseString_7
        INC     DPTR
        INC     R0
        MOV     R1,DPH
        MOV     R2,#0x0
        MOV     R3,#0x0
??parseString_8:
        MOV     A,R0
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,#(_Small_Ctype + 1) & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#((_Small_Ctype + 1) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        ANL     A,#0x44
        JZ      ??parseString_4
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_14:
        SUBB    A,#0x4
        MOV     A,R3
        SUBB    A,#0x0
        JC      ??parseString_8
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#0x3f
        MOVX    @DPTR,A
        MOV     A,R0
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        SJMP    ??parseString_3
??parseString_7:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R2,#0x0
        MOV     R3,#0x0
??parseString_9:
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R6,A
        MOV     A,R7
        RLC     A
        MOV     R7,A
        MOV     A,#??pair & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#(??pair >> 8) & 0xff
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JNZ     ??parseString_10
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
        MOV     A,R3
        RLC     A
        MOV     R3,A
        MOV     A,#(??pair + 1) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((??pair + 1) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??parseString_11
//  149     }
//  150     return 0;
??parseString_4:
        MOV     R2,#0x0
        MOV     R3,#0x0
??parseString_6:
        LJMP    ?Subroutine3 & 0xFFFF
??parseString_10:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_13:
        SUBB    A,#0x8
        MOV     A,R3
        SUBB    A,#0x0
        JNC     ??parseString_4
        SJMP    ??parseString_9
??parseString_11:
        LJMP    ??parseString_2 & 0xFFFF
          CFI EndBlock cfiBlock27
//  151 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function parseString
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function parseString
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+0
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        CLR     C
        MOV     A,R2
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30
//  152 
//  153 /** Parse a string to get the name of a property.
//  154   * @param ptr Pointer to first character.
//  155   * @param property The property to assign the name.
//  156   * @retval Pointer to first of property value. If success.
//  157   * @retval Null pointer if any error occur. */
//  158 static char* propertyName( char* ptr, json_t* property ) {
//  159     property->name = ++ptr;
//  160     ptr = parseString( ptr );
//  161     if ( !ptr ) return 0;
//  162     ptr = goBlank( ptr );
//  163     if ( !ptr ) return 0;
//  164     if ( *ptr++ != ':' ) return 0;
//  165     return goBlank( ptr );
//  166 }
//  167 
//  168 /** Parse a string to get the value of a property when its type is JSON_TEXT.
//  169   * @param ptr Pointer to first character ('\"').
//  170   * @param property The property to assign the name.
//  171   * @retval Pointer to first non white space after the string. If success.
//  172   * @retval Null pointer if any error occur. */
//  173 static char* textValue( char* ptr, json_t* property ) {
//  174     ++property->u.value;
//  175     ptr = parseString( ++ptr );
//  176     if ( !ptr ) return 0;
//  177     property->type = JSON_TEXT;
//  178     return ptr;
//  179 }
//  180 
//  181 /** Compare two strings until get the null character in the second one.
//  182   * @param ptr sub string
//  183   * @param str main string
//  184   * @retval Pointer to next character.
//  185   * @retval Null pointer if any error occur. */
//  186 static char* checkStr( char* ptr, char const* str ) {
//  187     while( *str )
//  188         if ( *ptr++ != *str++ )
//  189             return 0;
//  190     return ptr;
//  191 }
//  192 
//  193 /** Parser a string to get a primitive value.
//  194   * If the first character after the value is different of '}' or ']' is set to '\0'.
//  195   * @param ptr Pointer to first character.
//  196   * @param property Property handler to set the value and the type, (true, false or null).
//  197   * @param value String with the primitive literal.
//  198   * @param type The code of the type. ( JSON_BOOLEAN or JSON_NULL )
//  199   * @retval Pointer to first non white space after the string. If success.
//  200   * @retval Null pointer if any error occur. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  201 static char* primitiveValue( char* ptr, json_t* property, char const* value, jsonType_t type ) {
primitiveValue:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function primitiveValue
        CODE
        FUNCALL primitiveValue, isEndOfPrimitive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL primitiveValue, setToNull
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     ?V0 + 2,R1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
//  202     ptr = checkStr( ptr, value );
??CrossCallReturnLabel_5:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JZ      ??primitiveValue_0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      ??CrossCallReturnLabel_5
        SJMP    ??primitiveValue_1
//  203     if ( !ptr || !isEndOfPrimitive( *ptr ) ) return 0;
??primitiveValue_0:
        MOV     A,R6
        ORL     A,R7
        JZ      ??primitiveValue_1
        ; Setup parameters for call to function isEndOfPrimitive
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??isEndOfPrimitive?relay
        JC      ??primitiveValue_2
??primitiveValue_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??primitiveValue_3
//  204     ptr = setToNull( ptr );
??primitiveValue_2:
        ; Setup parameters for call to function setToNull
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??setToNull?relay
//  205     property->type = type;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  206     return ptr;
??primitiveValue_3:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock31
//  207 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function json_create
          CFI Conditional ??CrossCallReturnLabel_4
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function primitiveValue
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+0
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function poolAlloc
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function poolAlloc
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+0
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36
//  208 
//  209 /** Parser a string to get a true value.
//  210   * If the first character after the value is different of '}' or ']' is set to '\0'.
//  211   * @param ptr Pointer to first character.
//  212   * @param property Property handler to set the value and the type, (true, false or null).
//  213   * @retval Pointer to first non white space after the string. If success.
//  214   * @retval Null pointer if any error occur. */
//  215 static char* trueValue( char* ptr, json_t* property ) {
//  216     return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
//  217 }
//  218 
//  219 /** Parser a string to get a false value.
//  220   * If the first character after the value is different of '}' or ']' is set to '\0'.
//  221   * @param ptr Pointer to first character.
//  222   * @param property Property handler to set the value and the type, (true, false or null).
//  223   * @retval Pointer to first non white space after the string. If success.
//  224   * @retval Null pointer if any error occur. */
//  225 static char* falseValue( char* ptr, json_t* property ) {
//  226     return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
//  227 }
//  228 
//  229 /** Parser a string to get a null value.
//  230   * If the first character after the value is different of '}' or ']' is set to '\0'.
//  231   * @param ptr Pointer to first character.
//  232   * @param property Property handler to set the value and the type, (true, false or null).
//  233   * @retval Pointer to first non white space after the string. If success.
//  234   * @retval Null pointer if any error occur. */
//  235 static char* nullValue( char* ptr, json_t* property ) {
//  236     return primitiveValue( ptr, property, "null", JSON_NULL );
//  237 }
//  238 
//  239 /** Analyze the exponential part of a real number.
//  240   * @param ptr Pointer to first character.
//  241   * @retval Pointer to first non numerical after the string. If success.
//  242   * @retval Null pointer if any error occur. */
//  243 static char* expValue( char* ptr ) {
//  244     if ( *ptr == '-' || *ptr == '+' ) ++ptr;
//  245     if ( !isdigit( (int)(*ptr) ) ) return 0;
//  246     ptr = goNum( ++ptr );
//  247     return ptr;
//  248 }
//  249 
//  250 /** Analyze the decimal part of a real number.
//  251   * @param ptr Pointer to first character.
//  252   * @retval Pointer to first non numerical after the string. If success.
//  253   * @retval Null pointer if any error occur. */
//  254 static char* fraqValue( char* ptr ) {
//  255     if ( !isdigit( (int)(*ptr) ) ) return 0;
//  256     ptr = goNum( ++ptr );
//  257     if ( !ptr ) return 0;
//  258     return ptr;
//  259 }
//  260 
//  261 /** Parser a string to get a numerical value.
//  262   * If the first character after the value is different of '}' or ']' is set to '\0'.
//  263   * @param ptr Pointer to first character.
//  264   * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
//  265   * @retval Pointer to first non white space after the string. If success.
//  266   * @retval Null pointer if any error occur. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  267 static char* numValue( char* ptr, json_t* property ) {
numValue:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function numValue
        CODE
        FUNCALL numValue, goNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL numValue, goNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL numValue, goNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL numValue, isEndOfPrimitive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL numValue, strcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL numValue, setToNull
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  268     if ( *ptr == '-' ) ++ptr;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x2d
        JNZ     ??numValue_0
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  269     if ( !isdigit( (int)(*ptr) ) ) return 0;
??numValue_0:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        JC      $+5
        LJMP    ??numValue_1 & 0xFFFF
//  270     if ( *ptr != '0' ) {
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x30
        JZ      ??numValue_2
//  271         ptr = goNum( ptr );
        ; Setup parameters for call to function goNum
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??goNum?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  272         if ( !ptr ) return 0;
        MOV     A,R6
        ORL     A,R7
        JNZ     ??numValue_3
        LJMP    ??numValue_1 & 0xFFFF
//  273     }
//  274     else if ( isdigit( (int)(*++ptr) ) ) return 0;
??numValue_2:
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        JNC     $+5
        LJMP    ??numValue_1 & 0xFFFF
//  275     property->type = JSON_INTEGER;
??numValue_3:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x4
        LCALL   ?Subroutine14 & 0xFFFF
//  276     if ( *ptr == '.' ) {
??CrossCallReturnLabel_23:
        MOVX    A,@DPTR
        XRL     A,#0x2e
        JNZ     ??numValue_4
//  277         ptr = fraqValue( ++ptr );
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        JNC     ??numValue_5
        ; Setup parameters for call to function goNum
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??goNum?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     A,R0
        ORL     A,R1
        JNZ     ??numValue_6
??numValue_5:
        MOV     R0,#0x0
        MOV     R1,#0x0
??numValue_6:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//  278         if ( !ptr ) return 0;
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??numValue_1 & 0xFFFF
//  279         property->type = JSON_REAL;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x5
        MOVX    @DPTR,A
//  280     }
//  281     if ( *ptr == 'e' || *ptr == 'E' ) {
??numValue_4:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x65
        JZ      ??numValue_7
        MOVX    A,@DPTR
        XRL     A,#0x45
        JNZ     ??numValue_8
//  282         ptr = expValue( ++ptr );
??numValue_7:
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOVX    A,@DPTR
        XRL     A,#0x2d
        JZ      ??numValue_9
        MOVX    A,@DPTR
        XRL     A,#0x2b
        JNZ     ??numValue_10
??numValue_9:
        INC     DPTR
        INC     R0
        MOV     R1,DPH
??numValue_10:
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        JC      ??numValue_11
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??numValue_12
??numValue_11:
        ; Setup parameters for call to function goNum
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??goNum?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  283         if ( !ptr ) return 0;
??numValue_12:
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??numValue_1 & 0xFFFF
//  284         property->type = JSON_REAL;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x5
        MOVX    @DPTR,A
//  285     }
//  286     if ( !isEndOfPrimitive( *ptr ) ) return 0;
??numValue_8:
        ; Setup parameters for call to function isEndOfPrimitive
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??isEndOfPrimitive?relay
        JNC     ??numValue_1
//  287     if ( JSON_INTEGER == property->type ) {
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??numValue_13
//  288         char const* value = property->u.value;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
//  289         bool const negative = *value == '-';
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,#0x2d
        JNZ     ??numValue_14
        SETB    B.0
        MOV     R0,#0x15
        SJMP    ??numValue_15
??numValue_14:
        CLR     B.0
        MOV     R0,#0x14
??numValue_15:
        MOV     A,R0
        ADD     A,#-0x1
        MOV     R2,A
        CLR     A
        ADDC    A,#-0x1
        MOV     R3,A
//  290         static char const min[] = "-9223372036854775808";
//  291         static char const max[] = "9223372036854775807";
//  292         unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
//  293         unsigned int const len = ( unsigned int const ) ( ptr - value );
        MOV     A,R6
        CLR     C
        SUBB    A,R4
        MOV     R0,A
        MOV     A,R7
        SUBB    A,R5
        MOV     R1,A
//  294         if ( len > maxdigits ) return 0;
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        JC      ??numValue_1
//  295         if ( len == maxdigits ) {
        MOV     A,R2
        XRL     A,R0
        JNZ     ??numValue_16
        MOV     A,R3
        XRL     A,R1
??numValue_16:
        JNZ     ??numValue_13
//  296             char const tmp = *ptr;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  297             *ptr = '\0';
        CLR     A
        MOVX    @DPTR,A
//  298             char const* const threshold = negative ? min: max;
        MOV     C,B.0
        JNC     ??numValue_17
        MOV     R2,#??min & 0xff
        MOV     R3,#(??min >> 8) & 0xff
        SJMP    ??numValue_18
??numValue_17:
        MOV     R2,#??max & 0xff
        MOV     R3,#(??max >> 8) & 0xff
//  299             if ( 0 > strcmp( threshold, value ) ) return 0;
??numValue_18:
        ; Setup parameters for call to function strcmp
        LCALL   ??strcmp?relay
        CLR     C
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??numValue_19
??numValue_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??numValue_20
//  300             *ptr = tmp;
??numValue_19:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  301         }
//  302     }
//  303     ptr = setToNull( ptr );
//  304     return ptr;
??numValue_13:
        ; Setup parameters for call to function setToNull
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??setToNull?relay
??numValue_20:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock37
//  305 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function json_createWithPool
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function json_createWithPool
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_18
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+0
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function objValue
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_19
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+0
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function objValue
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_20
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+0
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function numValue
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+0
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function objValue
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+0
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function parseString
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function numValue
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function numValue
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+0
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#(_Small_Ctype + 1) & 0xff
        ADD     A,R2
        LCALL   ??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_28:
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function numValue
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function numValue
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+0
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker50 Using cfiCommon1
          CFI (cfiPicker50) NoFunction
          CFI (cfiPicker50) Picker
        MOVX    A,@DPTR
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_30:
        RET
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function numValue
          CFI Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function numValue
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_1
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+0
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function goNum
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond53) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond53) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond53) CFA_SP SP+-5
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOV     R0,A
        MOV     A,#(_Small_Ctype + 1) & 0xff
        ADD     A,R0
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54
        REQUIRE ??Subroutine18_0
        ; // Fall through to label ??Subroutine18_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine18_0:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function numValue
          CFI Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function numValue
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_3
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+0
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function numValue
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_0
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+0
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function numValue
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_1
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+0
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function goNum
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond59) CFA_SP SP+-5
          CFI Block cfiPicker60 Using cfiCommon1
          CFI (cfiPicker60) NoFunction
          CFI (cfiPicker60) Picker
        MOV     DPL,A
        MOV     A,#((_Small_Ctype + 1) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     C,0xE0 /* A   */.2
        RET
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiPicker60

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
??min:
        DB "-9223372036854775808"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
??max:
        DB "9223372036854775807"
//  306 
//  307 /** Add a property to a JSON object or array.
//  308   * @param obj The handler of the JSON object or array.
//  309   * @param property The handler of the property to be added. */
//  310 static void add( json_t* obj, json_t* property ) {
//  311     property->sibling = 0;
//  312     if ( !obj->u.c.child ){
//  313 	    obj->u.c.child = property;
//  314 	    obj->u.c.last_child = property;
//  315     } else {
//  316 	    obj->u.c.last_child->sibling = property;
//  317 	    obj->u.c.last_child = property;
//  318     }
//  319 }
//  320 
//  321 /** Parser a string to get a json object value.
//  322   * @param ptr Pointer to first character.
//  323   * @param obj The handler of the JSON root object or array.
//  324   * @param pool The handler of a json pool for creating json instances.
//  325   * @retval Pointer to first character after the value. If success.
//  326   * @retval Null pointer if any error occur. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  327 static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
objValue:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI Function objValue
        CODE
        FUNCALL objValue, goBlank
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL objValue, parseString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL objValue, goBlank
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL objValue, goBlank
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL objValue, parseString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL objValue, primitiveValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL objValue, primitiveValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL objValue, primitiveValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL objValue, numValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  328     obj->type    = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x7b
        JNZ     ??objValue_0
        CLR     A
        SJMP    ??objValue_1
??objValue_0:
        MOV     A,#0x1
??objValue_1:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  329     obj->u.c.child = 0;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  330     obj->sibling = 0;
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine10 & 0xFFFF
//  331     ptr++;
??CrossCallReturnLabel_19:
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        SJMP    ??objValue_2
//  332     for(;;) {
//  333         ptr = goBlank( ptr );
//  334         if ( !ptr ) return 0;
//  335         if ( *ptr == ',' ) {
//  336             ++ptr;
??objValue_3:
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  337             continue;
//  338         }
??objValue_2:
        ; Setup parameters for call to function goBlank
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??goBlank?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??objValue_4 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x2c
        JZ      ??objValue_3
//  339         char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??objValue_5
        MOV     R0,#0x7d
        SJMP    ??objValue_6
??objValue_5:
        MOV     R0,#0x5d
//  340         if ( *ptr == endchar ) {
??objValue_6:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??objValue_7
//  341             *ptr = '\0';
        CLR     A
        MOVX    @DPTR,A
//  342             json_t* parentObj = obj->sibling;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine15_0 & 0xFFFF
//  343             if ( !parentObj ) return ++ptr;
??CrossCallReturnLabel_15:
        JNZ     ??objValue_8
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LJMP    ??objValue_9 & 0xFFFF
//  344             obj->sibling = 0;
??objValue_8:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  345             obj = parentObj;
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
//  346             ++ptr;
        MOV     DPL,R6
        MOV     DPH,R7
        SJMP    ??objValue_3
//  347             continue;
//  348         }
//  349         json_t* property = pool->alloc( pool );
??objValue_7:
        ; Setup parameters for indirect call
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?CALL_IND
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
//  350         if ( !property ) return 0;
        MOV     A,R2
        ORL     A,?V0 + 5
        JNZ     $+5
        LJMP    ??objValue_4 & 0xFFFF
//  351         if( obj->type != JSON_ARRAY ) {
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??objValue_10
//  352             if ( *ptr != '\"' ) return 0;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x22
        JZ      $+5
        LJMP    ??objValue_4 & 0xFFFF
//  353             ptr = propertyName( ptr, property );
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function parseString
        LCALL   ??parseString?relay
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??objValue_11
        ; Setup parameters for call to function goBlank
        LCALL   ??goBlank?relay
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??objValue_11
        MOVX    A,@DPTR
        XRL     A,#0x3a
        JNZ     ??objValue_11
        ; Setup parameters for call to function goBlank
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??goBlank?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R6,?V0 + 6
        MOV     R7,?V0 + 7
        SJMP    ??objValue_12
??objValue_11:
        MOV     R6,#0x0
        MOV     R7,#0x0
//  354             if ( !ptr ) return 0;
??objValue_12:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??objValue_13
        LJMP    ??objValue_4 & 0xFFFF
//  355         }
//  356         else property->name = 0;
??objValue_10:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  357         add( obj, property );
??objValue_13:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_17:
        JNZ     ??objValue_14
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_12:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        SJMP    ??objValue_15
??objValue_14:
        MOV     A,?V0 + 0
        ADD     A,#0x6
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
??objValue_15:
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        LCALL   ?Subroutine9 & 0xFFFF
//  358         property->u.value = ptr;
??CrossCallReturnLabel_8:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine14 & 0xFFFF
//  359         switch( *ptr ) {
??CrossCallReturnLabel_24:
        MOVX    A,@DPTR
        ADD     A,#-0x22
        JZ      ??objValue_16
        ADD     A,#-0x39
        JZ      ??objValue_17
        ADD     A,#-0xb
        JNZ     $+5
        LJMP    ??objValue_18 & 0xFFFF
        ADD     A,#-0x8
        JNZ     $+5
        LJMP    ??objValue_19 & 0xFFFF
        ADD     A,#-0x6
        JNZ     $+5
        LJMP    ??objValue_20 & 0xFFFF
        ADD     A,#-0x7
        JZ      $+5
        LJMP    ??objValue_21 & 0xFFFF
//  360             case '{':
//  361                 property->type    = JSON_OBJ;
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        LCALL   ?Subroutine9 & 0xFFFF
//  362                 property->u.c.child = 0;
??CrossCallReturnLabel_9:
        SJMP    ??objValue_22
//  363                 property->sibling = obj;
//  364                 obj = property;
//  365                 ++ptr;
//  366                 break;
//  367             case '[':
//  368                 property->type    = JSON_ARRAY;
??objValue_17:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        LCALL   ?Subroutine9 & 0xFFFF
//  369                 property->u.c.child = 0;
??CrossCallReturnLabel_10:
        CLR     A
??objValue_22:
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  370                 property->sibling = obj;
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  371                 obj = property;
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
//  372                 ++ptr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  373                 break;
        LJMP    ??objValue_23 & 0xFFFF
//  374             case '\"': ptr = textValue( ptr, property );  break;
??objValue_16:
        MOV     A,?V0 + 4
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??parseString?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R0,?V0 + 6
        MOV     R1,?V0 + 7
        MOV     A,R0
        ORL     A,R1
        JNZ     ??objValue_24
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??objValue_25
??objValue_24:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x2
        MOVX    @DPTR,A
??objValue_25:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        SJMP    ??objValue_23
//  375             case 't':  ptr = trueValue( ptr, property );  break;
??objValue_20:
        ; Setup parameters for call to function primitiveValue
        MOV     ?V0 + 6,#`?<Constant "true">` & 0xff
        MOV     ?V0 + 7,#(`?<Constant "true">` >> 8) & 0xff
        SJMP    ??objValue_26
//  376             case 'f':  ptr = falseValue( ptr, property ); break;
??objValue_18:
        ; Setup parameters for call to function primitiveValue
        MOV     ?V0 + 6,#`?<Constant "false">` & 0xff
        MOV     ?V0 + 7,#(`?<Constant "false">` >> 8) & 0xff
??objValue_26:
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R1,#0x3
        SJMP    ??objValue_27
          CFI CFA_XSP16 add(XSP16, 16)
//  377             case 'n':  ptr = nullValue( ptr, property );  break;
??objValue_19:
        ; Setup parameters for call to function primitiveValue
        MOV     ?V0 + 6,#`?<Constant "null">` & 0xff
        MOV     ?V0 + 7,#(`?<Constant "null">` >> 8) & 0xff
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R1,#0x6
??objValue_27:
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??primitiveValue?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        SJMP    ??objValue_28
//  378             default:   ptr = numValue( ptr, property );   break;
??objValue_21:
        ; Setup parameters for call to function numValue
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??numValue?relay
??objValue_28:
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  379         }
//  380         if ( !ptr ) return 0;
??objValue_23:
        MOV     A,R6
        ORL     A,R7
        JZ      $+5
        LJMP    ??objValue_2 & 0xFFFF
??objValue_4:
        MOV     R2,#0x0
        MOV     R3,#0x0
??objValue_9:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock61
//  381     }
//  382 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function objValue
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function objValue
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+0
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker64 Using cfiCommon1
          CFI (cfiPicker64) NoFunction
          CFI (cfiPicker64) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiPicker64

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond65 Using cfiCommon0
          CFI Function objValue
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function objValue
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+0
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function objValue
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+0
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68
//  383 
//  384 /** Initialize a json pool.
//  385   * @param pool The handler of the pool.
//  386   * @return a instance of a json. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  387 static json_t* poolInit( jsonPool_t* pool ) {
poolInit:
          CFI Block cfiBlock69 Using cfiCommon0
          CFI Function poolInit
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  388     jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
        MOV     A,R2
        ADD     A,#-0x6
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R1,A
//  389     spool->nextFree = 1;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  390     return spool->mem;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock69
//  391 }
//  392 
//  393 /** Create an instance of a json from a pool.
//  394   * @param pool The handler of the pool.
//  395   * @retval The handler of the new instance if success.
//  396   * @retval Null pointer if the pool was empty. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  397 static json_t* poolAlloc( jsonPool_t* pool ) {
poolAlloc:
          CFI Block cfiBlock70 Using cfiCommon0
          CFI Function poolAlloc
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  398     jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
        MOV     A,R2
        ADD     A,#-0x6
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
//  399     if ( spool->nextFree >= spool->qty ) return 0;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JC      ??poolAlloc_0
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??poolAlloc_1
//  400     return spool->mem + spool->nextFree++;
??poolAlloc_0:
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,R0
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     A,R0
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R4,B
        MOV     B,#0x9
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
??poolAlloc_1:
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock70
//  401 }
//  402 
//  403 /** Checks whether an character belongs to set.
//  404   * @param ch Character value to be checked.
//  405   * @param set Set of characters. It is just a null-terminated string.
//  406   * @return true or false there is membership or not. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  407 static bool isOneOfThem( char ch, char const* set ) {
isOneOfThem:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function isOneOfThem
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  408     while( *set != '\0' )
??isOneOfThem_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??isOneOfThem_1
//  409         if ( ch == *set++ )
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??isOneOfThem_0
//  410             return true;
        SETB    C
        SJMP    ??isOneOfThem_2
//  411     return false;
??isOneOfThem_1:
        CLR     C
          CFI EndBlock cfiBlock71
??isOneOfThem_2:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  412 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock72
//  413 
//  414 /** Increases a pointer while it points to a character that belongs to a set.
//  415   * @param str The initial pointer value.
//  416   * @param set Set of characters. It is just a null-terminated string.
//  417   * @return The final pointer value or null pointer if the null character was found. */
//  418 static char* goWhile( char* str, char const* set ) {
//  419     for(; *str != '\0'; ++str ) {
//  420         if ( !isOneOfThem( *str, set ) )
//  421             return str;
//  422     }
//  423     return 0;
//  424 }
//  425 
//  426 /** Set of characters that defines a blank. */
//  427 static char const* const blank = " \n\r\t\f";
//  428 
//  429 /** Increases a pointer while it points to a white space character.
//  430   * @param str The initial pointer value.
//  431   * @return The final pointer value or null pointer if the null character was found. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  432 static char* goBlank( char* str ) {
goBlank:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI Function goBlank
        CODE
        FUNCALL goBlank, isOneOfThem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  433     return goWhile( str, blank );
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        SJMP    ??goBlank_0
??goBlank_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
??goBlank_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      ??goBlank_2
        ; Setup parameters for call to function isOneOfThem
        MOV     R2,#`?<Constant " \\n\\r\\t\\f">` & 0xff
        MOV     R3,#(`?<Constant " \\n\\r\\t\\f">` >> 8) & 0xff
        MOV     R1,A
        LCALL   ??isOneOfThem?relay
        JC      ??goBlank_1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??goBlank_3
??goBlank_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??goBlank_3:
        SJMP    ?Subroutine3
          CFI EndBlock cfiBlock73
//  434 }
//  435 
//  436 /** Increases a pointer while it points to a decimal digit character.
//  437   * @param str The initial pointer value.
//  438   * @return The final pointer value or null pointer if the null character was found. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  439 static char* goNum( char* str ) {
goNum:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI Function goNum
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        SJMP    ??goNum_0
//  440     for( ; *str != '\0'; ++str ) {
??goNum_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
??goNum_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??goNum_2
//  441         if ( !isdigit( (int)(*str) ) )
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_29:
        JC      ??goNum_1
//  442             return str;
        SJMP    ??goNum_3
//  443     }
//  444     return 0;
??goNum_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??goNum_3:
        SJMP    ?Subroutine2
          CFI EndBlock cfiBlock74
//  445 }
//  446 
//  447 /** Set of characters that defines the end of an array or a JSON object. */
//  448 static char const* const endofblock = "}]";
//  449 
//  450 /** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
//  451   * @param ch Pointer to character.
//  452   * @return  Final value pointer. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  453 static char* setToNull( char* ch ) {
setToNull:
          CFI Block cfiBlock75 Using cfiCommon0
          CFI Function setToNull
        CODE
        FUNCALL setToNull, isOneOfThem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  454     if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
        ; Setup parameters for call to function isOneOfThem
        MOV     R2,#`?<Constant "}]">` & 0xff
        MOV     R3,#(`?<Constant "}]">` >> 8) & 0xff
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??isOneOfThem?relay
        JC      ??setToNull_0
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  455     return ch;
??setToNull_0:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
          CFI EndBlock cfiBlock75
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  456 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock76 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock76
//  457 
//  458 /** Indicate if a character is the end of a primitive value. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  459 static bool isEndOfPrimitive( char ch ) {
isEndOfPrimitive:
          CFI Block cfiBlock77 Using cfiCommon0
          CFI Function isEndOfPrimitive
        CODE
        FUNCALL isEndOfPrimitive, isOneOfThem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL isEndOfPrimitive, isOneOfThem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  460     return ch == ',' || isOneOfThem( ch, blank ) || isOneOfThem( ch, endofblock );
        MOV     A,#0x2c
        XRL     A,R6
        JZ      ??isEndOfPrimitive_0
        ; Setup parameters for call to function isOneOfThem
        MOV     R2,#`?<Constant " \\n\\r\\t\\f">` & 0xff
        MOV     R3,#(`?<Constant " \\n\\r\\t\\f">` >> 8) & 0xff
        LCALL   ??isOneOfThem?relay
        JC      ??isEndOfPrimitive_0
        ; Setup parameters for call to function isOneOfThem
        MOV     R2,#`?<Constant "}]">` & 0xff
        MOV     R3,#(`?<Constant "}]">` >> 8) & 0xff
        MOV     A,R6
        MOV     R1,A
        LCALL   ??isOneOfThem?relay
        MOV     B.0,C
        SJMP    ??isEndOfPrimitive_1
??isEndOfPrimitive_0:
        SETB    B.0
??isEndOfPrimitive_1:
        MOV     C,B.0
        SJMP    ?Subroutine3
          CFI EndBlock cfiBlock77
//  461 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??json_getProperty?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    json_getProperty

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??json_getPropertyValue?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    json_getPropertyValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??json_createWithPool?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    json_createWithPool

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??json_create?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    json_create

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??parseString?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    parseString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??primitiveValue?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    primitiveValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??numValue?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    numValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??objValue?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    objValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??poolInit?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    poolInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??poolAlloc?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    poolAlloc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??isOneOfThem?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    isOneOfThem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??goBlank?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    goBlank

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??goNum?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    goNum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??setToNull?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    setToNull

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??isEndOfPrimitive?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    isEndOfPrimitive

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " \\n\\r\\t\\f">`:
        DB " \012\015\t\014"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "}]">`:
        DB "}]"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "true">`:
        DB "true"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "false">`:
        DB "false"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "null">`:
        DB "null"

        END
// 
// 2 290 bytes in segment BANKED_CODE
//    90 bytes in segment BANK_RELAYS
//    82 bytes in segment XDATA_ROM_C
// 
// 2 380 bytes of CODE  memory
//    82 bytes of CONST memory
//
//Errors: none
//Warnings: 1
