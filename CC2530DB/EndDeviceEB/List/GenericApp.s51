///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            02/Mar/2023  00:40:47 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\Source\GenericApp.c                           /
//    Command line       =  -f D:\Project\ZStack\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg (-DCPU32MHZ -DROOT=__near_func                /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\Project\ZStack\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\Tool /
//                          s\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0  /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\Project\ZStack\Projects /
//                          \zstack\Samples\GenericApp\Source\GenericApp.c    /
//                          -D NWK_AUTO_POLL -D MT_TASK -D MT_SYS_FUNC -D     /
//                          MT_ZDO_FUNC -D ED -D NV_INIT -lC                  /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\EndDeviceEB\List\ -lA                /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\EndDeviceEB\List\ --diag_suppress    /
//                          Pe001,Pa010 -o D:\Project\ZStack\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\ -e   /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\ -I D:\Project\ZStack\Projects\zstac /
//                          k\Samples\GenericApp\CC2530DB\..\Source\ -I       /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\hal\includ /
//                          e\ -I D:\Project\ZStack\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\..\..\..\..\..\Components\hal\ /
//                          target\CC2530EB\ -I D:\Project\ZStack\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\mac\include\ -I                         /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\mac\high_l /
//                          evel\ -I D:\Project\ZStack\Projects\zstack\Sample /
//                          s\GenericApp\CC2530DB\..\..\..\..\..\Components\m /
//                          ac\low_level\srf04\ -I D:\Project\ZStack\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\Components\mac\low_level\srf04\single_chip\ -I  /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\mt\ -I     /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\osal\inclu /
//                          de\ -I D:\Project\ZStack\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\..\..\..\..\..\Components\ser /
//                          vices\saddr\ -I D:\Project\ZStack\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\services\sdata\ -I                          /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\stack\af\  /
//                          -I D:\Project\ZStack\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\Components\stack\n /
//                          wk\ -I D:\Project\ZStack\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\..\..\..\..\..\Components\sta /
//                          ck\sapi\ -I D:\Project\ZStack\Projects\zstack\Sam /
//                          ples\GenericApp\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sec\ -I D:\Project\ZStack\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\stack\sys\ -I D:\Project\ZStack\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\zdo\ -I                           /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\zmac\ -I   /
//                          D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\..\..\..\..\..\Components\zmac\f8w\  /
//                          -Ohz                                              /
//    List file          =  D:\Project\ZStack\Projects\zstack\Samples\Generic /
//                          App\CC2530DB\EndDeviceEB\List\GenericApp.s51      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME GenericApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__iar_require _formatted_write", ""
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ADD_XSTACK_DISP0_16
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GenericApp_Init?relay
        FUNCTION ??GenericApp_Init?relay,0203H
        PUBLIC ??GenericApp_MessageMSGCB?relay
        FUNCTION ??GenericApp_MessageMSGCB?relay,0203H
        PUBLIC ??GenericApp_ProcessEvent?relay
        FUNCTION ??GenericApp_ProcessEvent?relay,0203H
        PUBLIC ??GenericApp_ProcessZDOMsgs?relay
        FUNCTION ??GenericApp_ProcessZDOMsgs?relay,0203H
        PUBLIC ??GenericApp_SendTheMessage?relay
        FUNCTION ??GenericApp_SendTheMessage?relay,0203H
        FUNCTION ??SerialApp_CallBack?relay,0203H
        PUBLIC ??convertHexToArray?relay
        FUNCTION ??convertHexToArray?relay,0203H
        PUBLIC ??countValidData?relay
        FUNCTION ??countValidData?relay,0203H
        PUBLIC ??delayMs?relay
        FUNCTION ??delayMs?relay,0203H
        PUBLIC ??exceptionHandler?relay
        FUNCTION ??exceptionHandler?relay,0203H
        PUBLIC ??init_ADC0?relay
        FUNCTION ??init_ADC0?relay,0203H
        PUBLIC ??nvStartupOperation?relay
        FUNCTION ??nvStartupOperation?relay,0203H
        PUBLIC ??nvWriteOperation?relay
        FUNCTION ??nvWriteOperation?relay,0203H
        PUBLIC ??processMsgToUart?relay
        FUNCTION ??processMsgToUart?relay,0203H
        PUBLIC ??processSending?relay
        FUNCTION ??processSending?relay,0203H
        PUBLIC ??sendData?relay
        FUNCTION ??sendData?relay,0203H
        PUBWEAK APCFG
        PUBLIC GenericApp_ClusterList
        PUBLIC GenericApp_CoorAddr
        PUBLIC GenericApp_Init
        FUNCTION GenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC GenericApp_MessageMSGCB
        FUNCTION GenericApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC GenericApp_NwkState
        PUBLIC GenericApp_ProcessEvent
        FUNCTION GenericApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC GenericApp_ProcessZDOMsgs
        FUNCTION GenericApp_ProcessZDOMsgs,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC GenericApp_SendTheMessage
        FUNCTION GenericApp_SendTheMessage,021203H
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC GenericApp_SimpleDesc
        PUBLIC GenericApp_TaskID
        PUBLIC GenericApp_TransID
        PUBLIC GenericApp_epDesc
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        FUNCTION SerialApp_CallBack,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC appData
        PUBLIC convertHexToArray
        FUNCTION convertHexToArray,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC countValidData
        FUNCTION countValidData,0203H
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC delayMs
        FUNCTION delayMs,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC exceptionHandler
        FUNCTION exceptionHandler,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC firstDevice
        PUBLIC init_ADC0
        FUNCTION init_ADC0,0201H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC nvStartupOperation
        FUNCTION nvStartupOperation,021201H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC nvWriteOperation
        FUNCTION nvWriteOperation,021201H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC processMsgToUart
        FUNCTION processMsgToUart,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC processSending
        FUNCTION processSending,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 472, STACK
        PUBLIC sendData
        FUNCTION sendData,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 72, STACK
        PUBLIC timeState
        PUBLIC uartConfig
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
EndDeviceProcessMsg SYMBOL "EndDeviceProcessMsg"
??EndDeviceProcessMsg?relay SYMBOL "?relay", EndDeviceProcessMsg
EndDeviceUpdateAddr SYMBOL "EndDeviceUpdateAddr"
??EndDeviceUpdateAddr?relay SYMBOL "?relay", EndDeviceUpdateAddr
HalLedSet           SYMBOL "HalLedSet"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
HalUARTOpen         SYMBOL "HalUARTOpen"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
HalUARTWrite        SYMBOL "HalUARTWrite"
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
Onboard_wait        SYMBOL "Onboard_wait"
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
afRegister          SYMBOL "afRegister"
??afRegister?relay  SYMBOL "?relay", afRegister
changeDimmerValue   SYMBOL "changeDimmerValue"
??changeDimmerValue?relay SYMBOL "?relay", changeDimmerValue
endDeviceProcessAddrRequest SYMBOL "endDeviceProcessAddrRequest"
??endDeviceProcessAddrRequest?relay SYMBOL "?relay", endDeviceProcessAddrRequest
json_create         SYMBOL "json_create"
??json_create?relay SYMBOL "?relay", json_create
json_getProperty    SYMBOL "json_getProperty"
??json_getProperty?relay SYMBOL "?relay", json_getProperty
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_nv_item_init   SYMBOL "osal_nv_item_init"
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
readAdcValue        SYMBOL "readAdcValue"
??readAdcValue?relay SYMBOL "?relay", readAdcValue
sprintf             SYMBOL "sprintf"
??sprintf?relay     SYMBOL "?relay", sprintf
strtol              SYMBOL "strtol"
??strtol?relay      SYMBOL "?relay", strtol
GenericApp_Init     SYMBOL "GenericApp_Init"
??GenericApp_Init?relay SYMBOL "?relay", GenericApp_Init
GenericApp_MessageMSGCB SYMBOL "GenericApp_MessageMSGCB"
??GenericApp_MessageMSGCB?relay SYMBOL "?relay", GenericApp_MessageMSGCB
GenericApp_ProcessEvent SYMBOL "GenericApp_ProcessEvent"
??GenericApp_ProcessEvent?relay SYMBOL "?relay", GenericApp_ProcessEvent
GenericApp_ProcessZDOMsgs SYMBOL "GenericApp_ProcessZDOMsgs"
??GenericApp_ProcessZDOMsgs?relay SYMBOL "?relay", GenericApp_ProcessZDOMsgs
GenericApp_SendTheMessage SYMBOL "GenericApp_SendTheMessage"
??GenericApp_SendTheMessage?relay SYMBOL "?relay", GenericApp_SendTheMessage
convertHexToArray   SYMBOL "convertHexToArray"
??convertHexToArray?relay SYMBOL "?relay", convertHexToArray
countValidData      SYMBOL "countValidData"
??countValidData?relay SYMBOL "?relay", countValidData
delayMs             SYMBOL "delayMs"
??delayMs?relay     SYMBOL "?relay", delayMs
exceptionHandler    SYMBOL "exceptionHandler"
??exceptionHandler?relay SYMBOL "?relay", exceptionHandler
init_ADC0           SYMBOL "init_ADC0"
??init_ADC0?relay   SYMBOL "?relay", init_ADC0
nvStartupOperation  SYMBOL "nvStartupOperation"
??nvStartupOperation?relay SYMBOL "?relay", nvStartupOperation
nvWriteOperation    SYMBOL "nvWriteOperation"
??nvWriteOperation?relay SYMBOL "?relay", nvWriteOperation
processMsgToUart    SYMBOL "processMsgToUart"
??processMsgToUart?relay SYMBOL "?relay", processMsgToUart
processSending      SYMBOL "processSending"
??processSending?relay SYMBOL "?relay", processSending
sendData            SYMBOL "sendData"
??sendData?relay    SYMBOL "?relay", sendData

        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??EndDeviceProcessMsg?relay
        FUNCTION ??EndDeviceProcessMsg?relay,00H
        EXTERN ??EndDeviceUpdateAddr?relay
        FUNCTION ??EndDeviceUpdateAddr?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??changeDimmerValue?relay
        FUNCTION ??changeDimmerValue?relay,00H
        EXTERN ??endDeviceProcessAddrRequest?relay
        FUNCTION ??endDeviceProcessAddrRequest?relay,00H
        EXTERN ??json_create?relay
        FUNCTION ??json_create?relay,00H
        EXTERN ??json_getProperty?relay
        FUNCTION ??json_getProperty?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??readAdcValue?relay
        FUNCTION ??readAdcValue?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN ??strtol?relay
        FUNCTION ??strtol?relay,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN EndDeviceProcessMsg
        FUNCTION EndDeviceProcessMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN EndDeviceUpdateAddr
        FUNCTION EndDeviceUpdateAddr,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN changeDimmerValue
        FUNCTION changeDimmerValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN endDeviceProcessAddrRequest
        FUNCTION endDeviceProcessAddrRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN json_create
        FUNCTION json_create,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN json_getProperty
        FUNCTION json_getProperty,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN readAdcValue
        FUNCTION readAdcValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strtol
        FUNCTION strtol,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Project\ZStack\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
//    1 /******************************************************************************
//    2   Filename:       GenericApp.c
//    3   Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
//    4   Revision:       $Revision: 29656 $
//    5 
//    6   Description:    Generic Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED �AS IS� WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends "Hello World" to another "Generic"
//   45   application every 5 seconds.  The application will also
//   46   receives "Hello World" packets.
//   47 
//   48   The "Hello World" messages are sent/received as MSG type message.
//   49 
//   50   This applications doesn't have a profile, so it handles everything
//   51   directly - itself.
//   52 
//   53   Key control:
//   54     SW1:
//   55     SW2:  initiates end device binding
//   56     SW3:
//   57     SW4:  initiates a match description request
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 
//   64 #include "GenericApp.h"

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr APCFG
APCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//   65 #include "ioCC2530.h"
//   66 #include <stdio.h>
//   67 #ifdef COOR
//   68 #include "Coordinator.h"
//   69 #else
//   70 #include "EndDevice.h"
//   71 #endif
//   72 /*********************************************************************
//   73  * TYPEDEFS
//   74  */
//   75 
//   76 /*********************************************************************
//   77  * GLOBAL VARIABLES
//   78  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//   79 GenericAppData appData = {0xFF, LIGHT_OFF, DEFAULT_DIMMER, DEFAULT_TIME, 0};
appData:
        DATA8
        DS 6
        REQUIRE `?<Initializer for appData>`
        REQUIRE __INIT_XDATA_I
//   80 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   81 const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
GenericApp_ClusterList:
        DATA16
        DW 1
        DW 32768
        DW 0
//   82     {
//   83         GENERICAPP_CLUSTERID, NWK_addr_rsp, NWK_addr_req};
//   84 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   85 const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
GenericApp_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 3
        DATA16
        DW GenericApp_ClusterList
        DATA8
        DB 3
        DATA16
        DW GenericApp_ClusterList
//   86     {
//   87         GENERICAPP_ENDPOINT,             //  int Endpoint;
//   88         GENERICAPP_PROFID,               //  uint16 AppProfId[2];
//   89         GENERICAPP_DEVICEID,             //  uint16 AppDeviceId[2];
//   90         GENERICAPP_DEVICE_VERSION,       //  int   AppDevVer:4;
//   91         GENERICAPP_FLAGS,                //  int   AppFlags:4;
//   92         GENERICAPP_MAX_CLUSTERS,         //  byte  AppNumInClusters;
//   93         (cId_t *)GenericApp_ClusterList, //  byte *pAppInClusterList;
//   94         GENERICAPP_MAX_CLUSTERS,         //  byte  AppNumInClusters;
//   95         (cId_t *)GenericApp_ClusterList  //  byte *pAppInClusterList;
//   96 };
//   97 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   98 endPointDesc_t GenericApp_epDesc;
GenericApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   99 /*********************************************************************
//  100  * EXTERNAL VARIABLES
//  101  */
//  102 
//  103 /*********************************************************************
//  104  * EXTERNAL FUNCTIONS
//  105  */
//  106 
//  107 /*********************************************************************
//  108  * LOCAL VARIABLES
//  109  */
//  110 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  111 byte GenericApp_TaskID; // Task ID for internal task/event processing
GenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  112                         // This variable will be received when
//  113                         // GenericApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  114 devStates_t GenericApp_NwkState;
GenericApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  115 byte GenericApp_TransID; // This is the unique message ID (counter)
GenericApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  116 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  117 afAddrType_t GenericApp_CoorAddr;
GenericApp_CoorAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  118 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  119 halUARTCfg_t uartConfig;
uartConfig:
        DS 29
        REQUIRE __INIT_XDATA_Z
//  120 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  121 struct deviceNode *firstDevice = NULL;
firstDevice:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  122 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  123 uint8 timeState;
timeState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  124 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  125 static uint16 checkAddr = 0x0420;
checkAddr:
        DATA16
        DS 2
        REQUIRE `?<Initializer for checkAddr>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  126 static uint16 dataAddr = 0x0425;
dataAddr:
        DATA16
        DS 2
        REQUIRE `?<Initializer for dataAddr>`
        REQUIRE __INIT_XDATA_I
//  127 /*********************************************************************
//  128  * MACROS
//  129  */
//  130 
//  131 /*********************************************************************
//  132  * LOCAL FUNCTIONS
//  133  */
//  134 
//  135 static void uartInit();
//  136 void nvStartupOperation();
//  137 void nvWriteOperation();
//  138 int processMsgToUart(char *msg, char *data);
//  139 void init_ADC0();
//  140 void createPWM(uint8 dutyCycle);
//  141 
//  142 static void SerialApp_CallBack(uint8 port, uint8 event);
//  143 
//  144 /*********************************************************************
//  145  * NETWORK LAYER CALLBACKS
//  146  */
//  147 /*********************************************************************
//  148  * PUBLIC FUNCTIONS
//  149  */
//  150 /*********************************************************************
//  151  * @fn      GenericApp_Init
//  152  *
//  153  * @brief   Initialization function for the Generic App Task.
//  154  *          This is called during initialization and should contain
//  155  *          any application specific initialization (ie. hardware
//  156  *          initialization/setup, table initialization, power up
//  157  *          notificaiton ... ).
//  158  *
//  159  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  160  *                    used to send messages and set timers.
//  161  *
//  162  * @return  none
//  163  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  164 void GenericApp_Init(uint8 task_id)
GenericApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function GenericApp_Init
        CODE
//  165 {
        FUNCALL GenericApp_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, nvStartupOperation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, changeDimmerValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, init_ADC0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  166   HalLedSet(HAL_LED_ALL, HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0xf
        LCALL   ??HalLedSet?relay
//  167   GenericApp_TaskID = task_id;
        MOV     A,R6
        MOV     DPTR,#GenericApp_TaskID
        MOVX    @DPTR,A
//  168   GenericApp_NwkState = DEV_INIT;
        MOV     DPTR,#GenericApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  169   GenericApp_TransID = 0;
        MOV     DPTR,#GenericApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  170 
//  171   // Device hardware initialization can be added here or in main() (Zmain.c).
//  172   // If the hardware is application specific - add it here.
//  173   // If the hardware is other parts of the device add it in main().
//  174 
//  175   GenericApp_CoorAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#GenericApp_CoorAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  176   GenericApp_CoorAddr.endPoint = GENERICAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xa
        MOVX    @DPTR,A
//  177   GenericApp_CoorAddr.addr.shortAddr = NWK_COORDINATOR_ADDRESS;
        MOV     DPTR,#GenericApp_CoorAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  178 
//  179   // Fill out the endpoint description.
//  180   GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
        MOV     DPTR,#GenericApp_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  181   GenericApp_epDesc.task_id = &GenericApp_TaskID;
        INC     DPTR
        MOV     A,#GenericApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  182   GenericApp_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
        INC     DPTR
        MOV     A,#GenericApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  183   GenericApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  184 #ifdef COOR
//  185   // delayMs(20000);
//  186 #endif
//  187 #ifdef ED
//  188   nvStartupOperation();
        ; Setup parameters for call to function nvStartupOperation
        LCALL   ??nvStartupOperation?relay
//  189   changeDimmerValue(&appData);
        ; Setup parameters for call to function changeDimmerValue
        MOV     R2,#appData & 0xff
        MOV     R3,#(appData >> 8) & 0xff
        LCALL   ??changeDimmerValue?relay
//  190 #endif
//  191   uartInit();
        MOV     DPTR,#uartConfig + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPTR,#uartConfig + 27
        MOV     A,#??SerialApp_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTOpen
        MOV     R2,#uartConfig & 0xff
        MOV     R3,#(uartConfig >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  192   init_ADC0();
        ; Setup parameters for call to function init_ADC0
        LCALL   ??init_ADC0?relay
//  193   // HalLedInit();
//  194   //  Register the endpoint description with the AF
//  195   afRegister(&GenericApp_epDesc);
        ; Setup parameters for call to function afRegister
        MOV     R2,#GenericApp_epDesc & 0xff
        MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
          CFI EndBlock cfiBlock0
//  196 
//  197   // HalUARTWrite(SERIAL_APP_PORT, "START FOR DEBUG", 15);
//  198   //  delay 20s to wait for rasberry pie to boot
//  199 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  200 
//  201 /*********************************************************************
//  202  * @fn      GenericApp_ProcessEvent
//  203  *
//  204  * @brief   Generic Application Task event processor.  This function
//  205  *          is called to process all events for the task.  Events
//  206  *          include timers, messages and any other user defined events.
//  207  *
//  208  * @param   task_id  - The OSAL assigned task ID.
//  209  * @param   events - events to process.  This is a bit map and can
//  210  *                   contain more than one event.
//  211  *
//  212  * @return  none
//  213  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  214 uint16 GenericApp_ProcessEvent(uint8 task_id, uint16 events)
GenericApp_ProcessEvent:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function GenericApp_ProcessEvent
        CODE
//  215 {
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, sendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, EndDeviceUpdateAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, readAdcValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  216   afIncomingMSGPacket_t *MSGpkt;
//  217   afDataConfirm_t *afDataConfirm;
//  218   (void)task_id; // Intentionally unreferenced parameter
//  219 
//  220   if (events & SYS_EVENT_MSG)
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
//  221   {
//  222     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(GenericApp_TaskID);
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??GenericApp_ProcessEvent_1
//  223     while (MSGpkt)
//  224     {
//  225       switch (MSGpkt->hdr.event)
//  226       {
//  227       case ZDO_CB_MSG:
//  228         GenericApp_ProcessZDOMsgs((zdoIncomingMsg_t *)MSGpkt);
//  229         break;
//  230       case AF_INCOMING_MSG_CMD:
//  231         GenericApp_MessageMSGCB(MSGpkt);
//  232         break;
//  233 
//  234       case ZDO_STATE_CHANGE:
//  235         GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??GenericApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_NwkState
        MOVX    @DPTR,A
//  236         if (GenericApp_NwkState == DEV_ZB_COORD)
        XRL     A,#0x9
        JNZ     ??GenericApp_ProcessEvent_3
//  237           HalUARTWrite(SERIAL_APP_PORT, "Coordinator\n", 14);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Coordinator\\n">` & 0xff
        MOV     R3,#(`?<Constant "Coordinator\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  238 
//  239 #ifdef ED
//  240         if (GenericApp_NwkState == DEV_END_DEVICE)
??GenericApp_ProcessEvent_3:
        MOV     DPTR,#GenericApp_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??GenericApp_ProcessEvent_4
//  241         {
//  242           HalUARTWrite(SERIAL_APP_PORT, " Dev end device", 15);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xf
        MOV     R5,#0x0
        MOV     R2,#`?<Constant " Dev end device">` & 0xff
        MOV     R3,#(`?<Constant " Dev end device">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  243           osal_start_timerEx(GenericApp_TaskID,
//  244                              GENERICAPP_TIMEINTERVAL, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x45
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  245         }
//  246         if (GenericApp_NwkState == DEV_NWK_ORPHAN)
??GenericApp_ProcessEvent_4:
        MOV     DPTR,#GenericApp_NwkState
        MOVX    A,@DPTR
        XRL     A,#0xa
        JNZ     ??GenericApp_ProcessEvent_5
//  247         {
//  248           SystemResetSoft();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  249         }
//  250         break;
//  251 #endif
//  252       default:
//  253         break;
//  254       }
//  255 
//  256       // Release the memory
//  257       osal_msg_deallocate((uint8 *)MSGpkt);
??GenericApp_ProcessEvent_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  258 
//  259       // Next
//  260       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(GenericApp_TaskID);
        ; Setup parameters for call to function osal_msg_receive
??GenericApp_ProcessEvent_1:
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??GenericApp_ProcessEvent_6
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??GenericApp_ProcessEvent_7
        ADD     A,#0x49
        JZ      ??GenericApp_ProcessEvent_2
        SJMP    ??GenericApp_ProcessEvent_5
??GenericApp_ProcessEvent_7:
        ; Setup parameters for call to function GenericApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??GenericApp_MessageMSGCB?relay
        SJMP    ??GenericApp_ProcessEvent_5
//  261     }
//  262     // return unprocessed events
//  263     return (events ^ SYS_EVENT_MSG);
??GenericApp_ProcessEvent_6:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??GenericApp_ProcessEvent_8
//  264   }
//  265 #ifdef ED
//  266   // Send a message out - This event is generated by a timer
//  267   if (events & GENERICAPP_TIMEINTERVAL)
??GenericApp_ProcessEvent_0:
        MOV     A,R6
        ANL     A,#0x45
        JZ      ??GenericApp_ProcessEvent_9
//  268   {
//  269     static int count = 0;
//  270     count++;
        MOV     DPTR,#??count
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  271     if (count % appData.time == 0)
        MOV     DPTR,#??count
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#appData + 3
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??GenericApp_ProcessEvent_10
//  272     {
//  273       sendData(&GenericApp_CoorAddr, &appData);
        ; Setup parameters for call to function sendData
        MOV     R4,#appData & 0xff
        MOV     R5,#(appData >> 8) & 0xff
        MOV     R2,#GenericApp_CoorAddr & 0xff
        MOV     R3,#(GenericApp_CoorAddr >> 8) & 0xff
        LCALL   ??sendData?relay
//  274     }
//  275     if (count % GENERICAPP_UPDATEADDR == 0)
??GenericApp_ProcessEvent_10:
        MOV     DPTR,#??count
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??GenericApp_ProcessEvent_11
//  276     {
//  277       EndDeviceUpdateAddr();
        ; Setup parameters for call to function EndDeviceUpdateAddr
        LCALL   ??EndDeviceUpdateAddr?relay
//  278     }
//  279     readAdcValue(&appData);
??GenericApp_ProcessEvent_11:
        ; Setup parameters for call to function readAdcValue
        MOV     R2,#appData & 0xff
        MOV     R3,#(appData >> 8) & 0xff
        LCALL   ??readAdcValue?relay
//  280     osal_start_timerEx(GenericApp_TaskID,
//  281                        GENERICAPP_TIMEINTERVAL, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x45
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  282 
//  283     return (events ^ GENERICAPP_TIMEINTERVAL);
        MOV     A,R6
        XRL     A,#0x45
        MOV     R2,A
        MOV     A,R7
??GenericApp_ProcessEvent_8:
        MOV     R3,A
        SJMP    ??GenericApp_ProcessEvent_12
//  284   }
//  285 #endif
//  286   // Discard unknown events
//  287   return 0;
??GenericApp_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??GenericApp_ProcessEvent_12:
        LJMP    ??Subroutine11_0 & 0xFFFF
          CFI EndBlock cfiBlock2
//  288 }

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??count:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  289 
//  290 /*********************************************************************
//  291  * Event Generation Functions
//  292  */
//  293 
//  294 /*********************************************************************
//  295  * @fn      GenericApp_ProcessZDOMsgs()
//  296  *
//  297  * @brief   Process response messages
//  298  *
//  299  * @param   none
//  300  *
//  301  * @return  none
//  302  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  303 void GenericApp_ProcessZDOMsgs(zdoIncomingMsg_t *inMsg)
GenericApp_ProcessZDOMsgs:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function GenericApp_ProcessZDOMsgs
        CODE
//  304 {
        ; Saved register size: 0
        ; Auto size: 0
//  305   switch (inMsg->clusterID)
//  306   {
//  307   }
//  308 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock3
//  309 
//  310 /*********************************************************************
//  311  * LOCAL FUNCTIONS
//  312  */
//  313 
//  314 /*********************************************************************
//  315  * @fn      GenericApp_MessageMSGCB
//  316  *
//  317  * @brief   Data message processor callback.  This function processes
//  318  *          any incoming data - probably from other devices.  So, based
//  319  *          on cluster ID, perform the intended action.
//  320  *
//  321  * @param   none
//  322  *
//  323  * @return  none
//  324  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  325 void GenericApp_MessageMSGCB(afIncomingMSGPacket_t *pkt)
GenericApp_MessageMSGCB:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function GenericApp_MessageMSGCB
        CODE
//  326 {
        FUNCALL GenericApp_MessageMSGCB, EndDeviceProcessMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, readAdcValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, changeDimmerValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, sendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, nvWriteOperation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, endDeviceProcessAddrRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, EndDeviceUpdateAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  327   if (pkt->clusterId == GENERICAPP_CLUSTERID)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??GenericApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??GenericApp_MessageMSGCB_0:
        JNZ     ??GenericApp_MessageMSGCB_1
//  328   {
//  329     switch (GenericApp_NwkState)
        MOV     DPTR,#GenericApp_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??GenericApp_MessageMSGCB_2
//  330     {
//  331 #ifdef COOR
//  332     case DEV_ZB_COORD:
//  333       if (CoordProcessMsg(pkt))
//  334       {
//  335         char sendData[DATA_LENGTH];
//  336         int len = processMsgToUart(pkt->cmd.Data, sendData);
//  337         HalUARTWrite(SERIAL_APP_PORT, sendData, len);
//  338       }
//  339       break;
//  340 #endif
//  341 #ifdef ED
//  342     case DEV_END_DEVICE:
//  343       if (EndDeviceProcessMsg(pkt))
        ; Setup parameters for call to function EndDeviceProcessMsg
        LCALL   ??EndDeviceProcessMsg?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??GenericApp_MessageMSGCB_1
//  344       {
//  345         readAdcValue(&appData);
        ; Setup parameters for call to function readAdcValue
        MOV     R2,#appData & 0xff
        MOV     R3,#(appData >> 8) & 0xff
        LCALL   ??readAdcValue?relay
//  346         changeDimmerValue(&appData);
        ; Setup parameters for call to function changeDimmerValue
        MOV     R2,#appData & 0xff
        MOV     R3,#(appData >> 8) & 0xff
        LCALL   ??changeDimmerValue?relay
//  347         sendData(&GenericApp_CoorAddr, &appData);
        ; Setup parameters for call to function sendData
        MOV     R4,#appData & 0xff
        MOV     R5,#(appData >> 8) & 0xff
        MOV     R2,#GenericApp_CoorAddr & 0xff
        MOV     R3,#(GenericApp_CoorAddr >> 8) & 0xff
        LCALL   ??sendData?relay
//  348         nvWriteOperation();
        ; Setup parameters for call to function nvWriteOperation
        LCALL   ??nvWriteOperation?relay
//  349       }
//  350       break;
//  351 #endif
//  352     default:
//  353       break;
//  354     }
//  355   }
//  356   if (pkt->clusterId == NWK_addr_rsp)
//  357   {
//  358 #ifdef COOR
//  359     coorProcessRecvAddr(pkt);
//  360 #endif
//  361   }
//  362   if (pkt->clusterId == NWK_addr_req)
??GenericApp_MessageMSGCB_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??GenericApp_MessageMSGCB_2
//  363   {
//  364 #ifdef ED
//  365     if (endDeviceProcessAddrRequest(pkt))
        ; Setup parameters for call to function endDeviceProcessAddrRequest
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??endDeviceProcessAddrRequest?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??GenericApp_MessageMSGCB_2
//  366     {
//  367       EndDeviceUpdateAddr();
        ; Setup parameters for call to function EndDeviceUpdateAddr
        LCALL   ??EndDeviceUpdateAddr?relay
          CFI EndBlock cfiBlock4
//  368     }
//  369 #endif
//  370   }
//  371 }
??GenericApp_MessageMSGCB_2:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  372 
//  373 /*********************************************************************
//  374  * @fn      GenericApp_SendTheMessage
//  375  *
//  376  * @brief   Send "the" message.
//  377  *
//  378  * @param   none
//  379  *
//  380  * @return  none
//  381  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  382 ZStatus_t GenericApp_SendTheMessage(afAddrType_t *addr, uint16 clusterId, uint8 *data, int len)
GenericApp_SendTheMessage:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function GenericApp_SendTheMessage
        CODE
//  383 {
        FUNCALL GenericApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  384   ZStatus_t status;
//  385   status = AF_DataRequest(addr, &GenericApp_epDesc, clusterId, len,
//  386                           data, &GenericApp_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS);
//  387   if (status != ZSuccess)
//  388   {
//  389     exceptionHandler("GenericApp_SendTheMessage");
//  390     exceptionHandler((char *)status);
//  391   }
//  392   return status;
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 4,#0x1e
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 4,#GenericApp_TransID & 0xff
        MOV     ?V0 + 5,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R1,#0x20
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  393 }
//  394 
//  395 static void uartInit()
//  396 {
//  397   uartConfig.baudRate = SERIAL_APP_BAUD;
//  398   uartConfig.callBackFunc = SerialApp_CallBack;
//  399   HalUARTOpen(SERIAL_APP_PORT, &uartConfig);
//  400 }
//  401 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  402 static void SerialApp_CallBack(uint8 port, uint8 event)
SerialApp_CallBack:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function SerialApp_CallBack
        CODE
//  403 {
        ; Saved register size: 0
        ; Auto size: 0
//  404   switch (event)
//  405   {
//  406   case HAL_UART_RX_TIMEOUT:
//  407 #ifdef COOR
//  408     if (GenericApp_NwkState == DEV_ZB_COORD)
//  409     {
//  410       uint8 *recvData = osal_mem_alloc(DATA_LENGTH * sizeof(uint8));
//  411       HalUARTRead(port, recvData, DATA_LENGTH);
//  412       CoordProcessUartData((char *)recvData);
//  413       osal_mem_free(recvData);
//  414     }
//  415 #endif
//  416     break;
//  417   default:
//  418     break;
//  419   }
//  420 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock7
//  421 
//  422 // This func is use commonly for processing json data

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  423 int processSending(uint8 *arr, GenericAppData *tempData)
processSending:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function processSending
        CODE
//  424 {
        FUNCALL processSending, json_create
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 472, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processSending, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 470, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processSending, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 470, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processSending, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 470, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processSending, json_getProperty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 470, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 470, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processSending, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 472, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processSending, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 472, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processSending, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 472, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL processSending, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 472, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 472, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 450
        MOV     DPL,#0x3e
        MOV     DPH,#-0x2
        LCALL   ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 470)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  425   json_t mem[DATA_LENGTH];
//  426   json_t const *json = json_create((char *)arr, mem, DATA_LENGTH);
        ; Setup parameters for call to function json_create
        MOV     ?V0 + 0,#0x32
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 472)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??json_create?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 470)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  427 
//  428   if (!json)
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??processSending_0
//  429   {
//  430     exceptionHandler("processSending");
//  431     return 0;
        MOV     R2,#0x0
        LJMP    ??processSending_1 & 0xFFFF
//  432   }
//  433 
//  434   json_t const *status = json_getProperty(json, "ON");
??processSending_0:
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "ON">` & 0xff
        MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
        LCALL   ??json_getProperty?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  435   json_t const *dim = json_getProperty(json, "DI");
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "DI">` & 0xff
        MOV     R5,#(`?<Constant "DI">` >> 8) & 0xff
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??json_getProperty?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
//  436   json_t const *freq = json_getProperty(json, "TI");
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "TI">` & 0xff
        MOV     R5,#(`?<Constant "TI">` >> 8) & 0xff
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??json_getProperty?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
//  437   json_t const *sen = json_getProperty(json, "SE");
        ; Setup parameters for call to function json_getProperty
        MOV     R4,#`?<Constant "SE">` & 0xff
        MOV     R5,#(`?<Constant "SE">` >> 8) & 0xff
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??json_getProperty?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  438 
//  439   if (status)
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??processSending_2
//  440   {
//  441     tempData->lightStatus = (uint8)json_getInteger(status);
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 8,#0xa
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 472)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 470)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
//  442   }
//  443   if (dim)
??processSending_2:
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??processSending_3
//  444   {
//  445     tempData->dimmer = json_getInteger(dim);
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 2,#0xa
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 472)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 470)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
//  446   }
//  447   if (freq)
??processSending_3:
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??processSending_4
//  448   {
//  449     tempData->time = json_getInteger(freq);
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 2,#0xa
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 472)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 470)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
//  450   }
//  451   if (sen)
??processSending_4:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??processSending_5
//  452   {
//  453     tempData->adcValue = json_getInteger(sen);
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 2,#0xa
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 472)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 470)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  454   }
//  455   return 1;
??processSending_5:
        MOV     R2,#0x1
??processSending_1:
        MOV     R3,#0x0
        MOV     DPL,#-0x3e
        MOV     DPH,#0x1
        LCALL   ?ADD_XSTACK_DISP0_16
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock8
//  456 }
//  457 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  458 ZStatus_t sendData(afAddrType_t *addr, GenericAppData *data)
sendData:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function sendData
        CODE
//  459 {
        FUNCALL sendData, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendData, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendData, countValidData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendData, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 50
        MOV     A,#-0x32
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  460   ZStatus_t status;
//  461   int len;
//  462   uint8 tempData[DATA_LENGTH];
//  463   osal_memset(tempData, 0, DATA_LENGTH);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x32
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  464   sprintf((char *)tempData, "{\"ID\":%d,\"ON\":%d,\"DI\":%d,\"SE\":%d,\"TI\":%d}",
//  465           data->id, data->lightStatus, data->dimmer, data->adcValue, data->time);
        ; Setup parameters for call to function sprintf
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 68)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 70)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 72)
        MOV     R4,#`?<Constant "{\\"ID\\":%d,\\"ON\\":%d,\\"DI\\"...">` & 0xff
        MOV     R5,#(`?<Constant "{\\"ID\\":%d,\\"ON\\":%d,\\"DI\\"...">` >> 8) & 0xff
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
//  466   len = countValidData((char *)tempData);
//  467   status = GenericApp_SendTheMessage(addr, GENERICAPP_CLUSTERID, tempData, len);
//  468   return status;
        ; Setup parameters for call to function GenericApp_SendTheMessage
        ; Setup parameters for call to function countValidData
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??countValidData?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??GenericApp_SendTheMessage?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,#0x32
          CFI EndBlock cfiBlock9
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  469 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 62)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock10
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
//  470 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  471 int countValidData(char *data)
countValidData:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function countValidData
        CODE
//  472 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  473   int count = 0;
        MOV     R0,#0x0
        MOV     R1,#0x0
//  474   while (count < DATA_LENGTH)
//  475   {
//  476     if (data[count] == 0)
??countValidData_0:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_9:
        JZ      ??countValidData_1
//  477       break;
//  478     count++;
        LCALL   ?Subroutine5 & 0xFFFF
//  479   }
??CrossCallReturnLabel_2:
        JC      ??countValidData_0
//  480   return count;
??countValidData_1:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock12
//  481 }
//  482 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  483 void convertHexToArray(const char *hexString, char *arr)
convertHexToArray:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function convertHexToArray
        CODE
//  484 {
        FUNCALL convertHexToArray, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL convertHexToArray, strtol
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  485   char *endptr;
//  486   unsigned char temp_arr[2];
//  487   for (int i = 0; i < 8; i++)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  488   {
//  489     osal_memcpy(temp_arr, hexString + 2 * i, 2);
??convertHexToArray_0:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,?V0 + 1
        RLC     A
        MOV     R1,A
        MOV     A,?V0 + 2
        ADD     A,R0
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 3
        ADDC    A,R1
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  490     arr[i] = strtol((const char *)temp_arr, &endptr, 16);
        ; Setup parameters for call to function strtol
        MOV     ?V0 + 4,#0x10
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strtol?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
//  491   }
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x8
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??convertHexToArray_0
//  492 }
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  493 void exceptionHandler(char *exception)
exceptionHandler:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function exceptionHandler
        CODE
//  494 {
        ; Saved register size: 0
        ; Auto size: 0
//  495 #ifdef DEBUG
//  496   HalUARTWrite(SERIAL_APP_PORT, "\nerror with op: ", 29);
//  497   HalUARTWrite(SERIAL_APP_PORT, (uint8 *)exception, countValidData(exception));
//  498 #endif
//  499 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock14
//  500 /*********************************************************************
//  501  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  502 void delayMs(int time)
delayMs:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function delayMs
        CODE
//  503 {
        FUNCALL delayMs, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  504   for (int i = 0; i < time; i++)
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??delayMs_0
//  505   {
//  506     Onboard_wait(1000);
??delayMs_1:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Onboard_wait?relay
//  507   }
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??delayMs_0:
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 0
        MOV     A,R7
        SUBB    A,?V0 + 1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??delayMs_1
//  508 }
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock15
//  509 #ifdef ED

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  510 void nvStartupOperation()
nvStartupOperation:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function nvStartupOperation
        CODE
//  511 {
        FUNCALL nvStartupOperation, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nvStartupOperation, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nvStartupOperation, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nvStartupOperation, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  512   uint8 checkValue;
//  513   void *tempPtr;
//  514   GenericAppData *tempData;
//  515   osal_nv_item_init(checkAddr, 1, NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     DPTR,#checkAddr
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  516   osal_nv_item_init(dataAddr, 6, NULL);
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     DPTR,#dataAddr
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  517 
//  518   osal_nv_read(checkAddr, 0, 1, &checkValue);
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPTR,#checkAddr
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  519   if (checkValue != 'x')
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x78
        JNZ     ??nvStartupOperation_0
//  520   {
//  521     return;
//  522   }
//  523   osal_nv_read(dataAddr, 0, 6, tempPtr);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x6
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPTR,#dataAddr
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  524   tempData = (GenericAppData *)tempPtr;
//  525   appData.id = tempData->id;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     DPTR,#appData
        LCALL   ?Subroutine9 & 0xFFFF
//  526   appData.lightStatus = tempData->lightStatus;
??CrossCallReturnLabel_11:
        MOVX    A,@DPTR
        MOV     DPTR,#appData + 1
        LCALL   ?Subroutine4 & 0xFFFF
//  527   appData.time = tempData->time;
??CrossCallReturnLabel_0:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#appData + 3
        LCALL   ?Subroutine4 & 0xFFFF
//  528   appData.dimmer = tempData->dimmer;
??CrossCallReturnLabel_1:
        MOVX    A,@DPTR
        MOV     DPTR,#appData + 2
        MOVX    @DPTR,A
//  529 }
??nvStartupOperation_0:
        MOV     A,#0x1
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function nvStartupOperation
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function nvStartupOperation
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+0
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        INC     DPTR
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function nvStartupOperation
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function nvStartupOperation
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_0
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+0
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function nvStartupOperation
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_1
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+0
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23
//  530 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  531 void nvWriteOperation()
nvWriteOperation:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function nvWriteOperation
        CODE
//  532 {
        FUNCALL nvWriteOperation, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nvWriteOperation, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  533   uint8 checkValue = 'x';
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x78
        MOVX    @DPTR,A
//  534   osal_nv_write(checkAddr, 0, 1, &checkValue);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPTR,#checkAddr
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  535   osal_nv_write(dataAddr, 0, 6, &appData);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#appData & 0xff
        MOV     ?V0 + 1,#(appData >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#0x6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPTR,#dataAddr
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  536 }
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function processSending
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function processSending
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+0
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function processSending
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+0
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function processSending
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+0
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function nvStartupOperation
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function nvStartupOperation
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+0
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function nvStartupOperation
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+0
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function nvStartupOperation
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+0
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function nvWriteOperation
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+0
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function nvWriteOperation
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+0
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function processSending
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+0
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function processSending
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+0
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function processSending
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+0
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function processSending
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+0
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 472)
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40
//  537 #endif
//  538 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  539 int processMsgToUart(char *msg, char *data)
processMsgToUart:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function processMsgToUart
        CODE
//  540 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  541   int count;
//  542   int j = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  543   for (int i = 0; i < DATA_LENGTH; i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??processMsgToUart_0
//  544   {
//  545     if (j == 0 && msg[i] == '{')
??processMsgToUart_1:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??processMsgToUart_2
??processMsgToUart_0:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        XRL     A,#0x7b
        JNZ     ??processMsgToUart_3
//  546     {
//  547       data[0] = '{';
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#0x7b
        MOVX    @DPTR,A
//  548       j++;
        MOV     R6,#0x1
        MOV     R7,#0x0
        SJMP    ??processMsgToUart_3
//  549     }
//  550     else if (j != 0 && msg[i] != '}')
??processMsgToUart_2:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        JZ      ??processMsgToUart_4
//  551     {
//  552       data[j] = msg[i];
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  553       j++;
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  554     }
//  555     if (msg[i] == '}')
??processMsgToUart_3:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        JNZ     ??processMsgToUart_5
//  556     {
//  557       data[j] = '}';
??processMsgToUart_4:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     A,#0x7d
        MOVX    @DPTR,A
//  558       break;
        SJMP    ??processMsgToUart_6
//  559     }
//  560   }
??processMsgToUart_5:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        JC      ??processMsgToUart_1
//  561   data[j + 1] = '\n';
??processMsgToUart_6:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        INC     DPTR
        MOV     A,#0xa
        MOVX    @DPTR,A
//  562   count = j + 2;
//  563   return count;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock41
//  564 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function countValidData
          CFI Conditional ??CrossCallReturnLabel_9
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function processMsgToUart
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+0
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function countValidData
          CFI Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_9
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function processMsgToUart
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_10
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+0
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function processMsgToUart
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_7
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+0
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function processMsgToUart
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_8
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+0
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function processMsgToUart
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function processMsgToUart
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+0
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_13:
        XRL     A,#0x7d
        RET
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function processMsgToUart
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-1
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function processMsgToUart
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+0
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function processMsgToUart
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+0
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker56 Using cfiCommon1
          CFI (cfiPicker56) NoFunction
          CFI (cfiPicker56) Picker
        MOV     A,R4
        ADD     A,R6
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiPicker56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function countValidData
          CFI Conditional ??CrossCallReturnLabel_2
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function processMsgToUart
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+0
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x32
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  565 void init_ADC0()
init_ADC0:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function init_ADC0
        CODE
//  566 {
        ; Saved register size: 0
        ; Auto size: 0
//  567   P0SEL |= 0x01;
        ORL     0xf3,#0x1
//  568   P0DIR &= ~0x01;
        ANL     0xfd,#0xfe
//  569   APCFG |= 0x01;
        ORL     0xf2,#0x1
//  570 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock60
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE APCFG

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for appData>`:
        DATA8
        DB 255
        DB 0
        DB 0
        DB 1
        DATA16
        DW 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for checkAddr>`:
        DATA16
        DW 1056

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for dataAddr>`:
        DATA16
        DW 1061

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_ProcessEvent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_ProcessZDOMsgs?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_MessageMSGCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_SendTheMessage?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_SendTheMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_CallBack?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SerialApp_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??processSending?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    processSending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sendData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??countValidData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    countValidData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??convertHexToArray?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    convertHexToArray

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??exceptionHandler?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    exceptionHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delayMs?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    delayMs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??nvStartupOperation?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    nvStartupOperation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??nvWriteOperation?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    nvWriteOperation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??processMsgToUart?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    processMsgToUart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??init_ADC0?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    init_ADC0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Coordinator\\n">`:
        DB "Coordinator\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " Dev end device">`:
        DB " Dev end device"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ON">`:
        DB "ON"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "DI">`:
        DB "DI"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TI">`:
        DB "TI"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SE">`:
        DB "SE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "{\\"ID\\":%d,\\"ON\\":%d,\\"DI\\"...">`:
        DB "{\"ID\":%d,\"ON\":%d,\"DI\":%d,\"SE\":%d,\"TI\":%d}"

        END
// 
// 1 829 bytes in segment BANKED_CODE
//    96 bytes in segment BANK_RELAYS
//     3 bytes in segment SFR_AN
//    10 bytes in segment XDATA_I
//    10 bytes in segment XDATA_ID
//   101 bytes in segment XDATA_ROM_C
//    55 bytes in segment XDATA_Z
// 
// 1 935 bytes of CODE  memory
//   101 bytes of CONST memory
//     0 bytes of DATA  memory (+ 3 bytes shared)
//    65 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
